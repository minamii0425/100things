
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Todos
 * 
 */
export type Todos = {
  id: number
  complete_date: Date | null
  description: string | null
  location: string | null
  status: string | null
  todo_name: string
}

/**
 * Model Comments
 * 
 */
export type Comments = {
  id: number
  comment_author: string
  comment_text: string
  comment_avatar: string
}

/**
 * Model Tags
 * 
 */
export type Tags = {
  id: number
  tag_name: string
}

/**
 * Model Todos_Comments
 * 
 */
export type Todos_Comments = {
  id: number
  comment_id: number
  todo_id: number
}

/**
 * Model Todos_Tags
 * 
 */
export type Todos_Tags = {
  id: number
  todo_id: number
  tag_id: number
}

/**
 * Model profiles
 * 
 */
export type profiles = {
  id: string
  updated_at: Date | null
  username: string | null
  full_name: string | null
  avatar_url: string | null
  website: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Todos
 * const todos = await prisma.todos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Todos
   * const todos = await prisma.todos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.todos`: Exposes CRUD operations for the **Todos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos
    * const todos = await prisma.todos.findMany()
    * ```
    */
  get todos(): Prisma.TodosDelegate<GlobalReject>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<GlobalReject>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **Tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.TagsDelegate<GlobalReject>;

  /**
   * `prisma.todos_Comments`: Exposes CRUD operations for the **Todos_Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos_Comments
    * const todos_Comments = await prisma.todos_Comments.findMany()
    * ```
    */
  get todos_Comments(): Prisma.Todos_CommentsDelegate<GlobalReject>;

  /**
   * `prisma.todos_Tags`: Exposes CRUD operations for the **Todos_Tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos_Tags
    * const todos_Tags = await prisma.todos_Tags.findMany()
    * ```
    */
  get todos_Tags(): Prisma.Todos_TagsDelegate<GlobalReject>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.profilesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Todos: 'Todos',
    Comments: 'Comments',
    Tags: 'Tags',
    Todos_Comments: 'Todos_Comments',
    Todos_Tags: 'Todos_Tags',
    profiles: 'profiles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TodosCountOutputType
   */


  export type TodosCountOutputType = {
    Todos_Comments: number
    Todos_Tags: number
  }

  export type TodosCountOutputTypeSelect = {
    Todos_Comments?: boolean
    Todos_Tags?: boolean
  }

  export type TodosCountOutputTypeGetPayload<S extends boolean | null | undefined | TodosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TodosCountOutputTypeArgs)
    ? TodosCountOutputType 
    : S extends { select: any } & (TodosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TodosCountOutputType ? TodosCountOutputType[P] : never
  } 
      : TodosCountOutputType




  // Custom InputTypes

  /**
   * TodosCountOutputType without action
   */
  export type TodosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TodosCountOutputType
     * 
    **/
    select?: TodosCountOutputTypeSelect | null
  }



  /**
   * Count Type CommentsCountOutputType
   */


  export type CommentsCountOutputType = {
    Todos_Comments: number
  }

  export type CommentsCountOutputTypeSelect = {
    Todos_Comments?: boolean
  }

  export type CommentsCountOutputTypeGetPayload<S extends boolean | null | undefined | CommentsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CommentsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CommentsCountOutputTypeArgs)
    ? CommentsCountOutputType 
    : S extends { select: any } & (CommentsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CommentsCountOutputType ? CommentsCountOutputType[P] : never
  } 
      : CommentsCountOutputType




  // Custom InputTypes

  /**
   * CommentsCountOutputType without action
   */
  export type CommentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CommentsCountOutputType
     * 
    **/
    select?: CommentsCountOutputTypeSelect | null
  }



  /**
   * Count Type TagsCountOutputType
   */


  export type TagsCountOutputType = {
    Todos_Tags: number
  }

  export type TagsCountOutputTypeSelect = {
    Todos_Tags?: boolean
  }

  export type TagsCountOutputTypeGetPayload<S extends boolean | null | undefined | TagsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TagsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TagsCountOutputTypeArgs)
    ? TagsCountOutputType 
    : S extends { select: any } & (TagsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TagsCountOutputType ? TagsCountOutputType[P] : never
  } 
      : TagsCountOutputType




  // Custom InputTypes

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TagsCountOutputType
     * 
    **/
    select?: TagsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Todos
   */


  export type AggregateTodos = {
    _count: TodosCountAggregateOutputType | null
    _avg: TodosAvgAggregateOutputType | null
    _sum: TodosSumAggregateOutputType | null
    _min: TodosMinAggregateOutputType | null
    _max: TodosMaxAggregateOutputType | null
  }

  export type TodosAvgAggregateOutputType = {
    id: number | null
  }

  export type TodosSumAggregateOutputType = {
    id: number | null
  }

  export type TodosMinAggregateOutputType = {
    id: number | null
    complete_date: Date | null
    description: string | null
    location: string | null
    status: string | null
    todo_name: string | null
  }

  export type TodosMaxAggregateOutputType = {
    id: number | null
    complete_date: Date | null
    description: string | null
    location: string | null
    status: string | null
    todo_name: string | null
  }

  export type TodosCountAggregateOutputType = {
    id: number
    complete_date: number
    description: number
    location: number
    status: number
    todo_name: number
    _all: number
  }


  export type TodosAvgAggregateInputType = {
    id?: true
  }

  export type TodosSumAggregateInputType = {
    id?: true
  }

  export type TodosMinAggregateInputType = {
    id?: true
    complete_date?: true
    description?: true
    location?: true
    status?: true
    todo_name?: true
  }

  export type TodosMaxAggregateInputType = {
    id?: true
    complete_date?: true
    description?: true
    location?: true
    status?: true
    todo_name?: true
  }

  export type TodosCountAggregateInputType = {
    id?: true
    complete_date?: true
    description?: true
    location?: true
    status?: true
    todo_name?: true
    _all?: true
  }

  export type TodosAggregateArgs = {
    /**
     * Filter which Todos to aggregate.
     * 
    **/
    where?: TodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     * 
    **/
    orderBy?: Enumerable<TodosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Todos
    **/
    _count?: true | TodosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodosMaxAggregateInputType
  }

  export type GetTodosAggregateType<T extends TodosAggregateArgs> = {
        [P in keyof T & keyof AggregateTodos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodos[P]>
      : GetScalarType<T[P], AggregateTodos[P]>
  }




  export type TodosGroupByArgs = {
    where?: TodosWhereInput
    orderBy?: Enumerable<TodosOrderByWithAggregationInput>
    by: Array<TodosScalarFieldEnum>
    having?: TodosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodosCountAggregateInputType | true
    _avg?: TodosAvgAggregateInputType
    _sum?: TodosSumAggregateInputType
    _min?: TodosMinAggregateInputType
    _max?: TodosMaxAggregateInputType
  }


  export type TodosGroupByOutputType = {
    id: number
    complete_date: Date | null
    description: string | null
    location: string | null
    status: string | null
    todo_name: string
    _count: TodosCountAggregateOutputType | null
    _avg: TodosAvgAggregateOutputType | null
    _sum: TodosSumAggregateOutputType | null
    _min: TodosMinAggregateOutputType | null
    _max: TodosMaxAggregateOutputType | null
  }

  type GetTodosGroupByPayload<T extends TodosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TodosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodosGroupByOutputType[P]>
            : GetScalarType<T[P], TodosGroupByOutputType[P]>
        }
      >
    >


  export type TodosSelect = {
    id?: boolean
    complete_date?: boolean
    description?: boolean
    location?: boolean
    status?: boolean
    todo_name?: boolean
    Todos_Comments?: boolean | Todos$Todos_CommentsArgs
    Todos_Tags?: boolean | Todos$Todos_TagsArgs
    _count?: boolean | TodosCountOutputTypeArgs
  }


  export type TodosInclude = {
    Todos_Comments?: boolean | Todos$Todos_CommentsArgs
    Todos_Tags?: boolean | Todos$Todos_TagsArgs
    _count?: boolean | TodosCountOutputTypeArgs
  } 

  export type TodosGetPayload<S extends boolean | null | undefined | TodosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Todos :
    S extends undefined ? never :
    S extends { include: any } & (TodosArgs | TodosFindManyArgs)
    ? Todos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Todos_Comments' ? Array < Todos_CommentsGetPayload<S['include'][P]>>  :
        P extends 'Todos_Tags' ? Array < Todos_TagsGetPayload<S['include'][P]>>  :
        P extends '_count' ? TodosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TodosArgs | TodosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Todos_Comments' ? Array < Todos_CommentsGetPayload<S['select'][P]>>  :
        P extends 'Todos_Tags' ? Array < Todos_TagsGetPayload<S['select'][P]>>  :
        P extends '_count' ? TodosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Todos ? Todos[P] : never
  } 
      : Todos


  type TodosCountArgs = Merge<
    Omit<TodosFindManyArgs, 'select' | 'include'> & {
      select?: TodosCountAggregateInputType | true
    }
  >

  export interface TodosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Todos that matches the filter.
     * @param {TodosFindUniqueArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Todos'> extends True ? Prisma__TodosClient<TodosGetPayload<T>> : Prisma__TodosClient<TodosGetPayload<T> | null, null>

    /**
     * Find one Todos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodosFindUniqueOrThrowArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodosFindUniqueOrThrowArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Find the first Todos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosFindFirstArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Todos'> extends True ? Prisma__TodosClient<TodosGetPayload<T>> : Prisma__TodosClient<TodosGetPayload<T> | null, null>

    /**
     * Find the first Todos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosFindFirstOrThrowArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodosFindFirstOrThrowArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Find zero or more Todos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Todos
     * const todos = await prisma.todos.findMany()
     * 
     * // Get first 10 Todos
     * const todos = await prisma.todos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todosWithIdOnly = await prisma.todos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodosFindManyArgs>(
      args?: SelectSubset<T, TodosFindManyArgs>
    ): PrismaPromise<Array<TodosGetPayload<T>>>

    /**
     * Create a Todos.
     * @param {TodosCreateArgs} args - Arguments to create a Todos.
     * @example
     * // Create one Todos
     * const Todos = await prisma.todos.create({
     *   data: {
     *     // ... data to create a Todos
     *   }
     * })
     * 
    **/
    create<T extends TodosCreateArgs>(
      args: SelectSubset<T, TodosCreateArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Create many Todos.
     *     @param {TodosCreateManyArgs} args - Arguments to create many Todos.
     *     @example
     *     // Create many Todos
     *     const todos = await prisma.todos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodosCreateManyArgs>(
      args?: SelectSubset<T, TodosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Todos.
     * @param {TodosDeleteArgs} args - Arguments to delete one Todos.
     * @example
     * // Delete one Todos
     * const Todos = await prisma.todos.delete({
     *   where: {
     *     // ... filter to delete one Todos
     *   }
     * })
     * 
    **/
    delete<T extends TodosDeleteArgs>(
      args: SelectSubset<T, TodosDeleteArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Update one Todos.
     * @param {TodosUpdateArgs} args - Arguments to update one Todos.
     * @example
     * // Update one Todos
     * const todos = await prisma.todos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodosUpdateArgs>(
      args: SelectSubset<T, TodosUpdateArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Delete zero or more Todos.
     * @param {TodosDeleteManyArgs} args - Arguments to filter Todos to delete.
     * @example
     * // Delete a few Todos
     * const { count } = await prisma.todos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodosDeleteManyArgs>(
      args?: SelectSubset<T, TodosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Todos
     * const todos = await prisma.todos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodosUpdateManyArgs>(
      args: SelectSubset<T, TodosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Todos.
     * @param {TodosUpsertArgs} args - Arguments to update or create a Todos.
     * @example
     * // Update or create a Todos
     * const todos = await prisma.todos.upsert({
     *   create: {
     *     // ... data to create a Todos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Todos we want to update
     *   }
     * })
    **/
    upsert<T extends TodosUpsertArgs>(
      args: SelectSubset<T, TodosUpsertArgs>
    ): Prisma__TodosClient<TodosGetPayload<T>>

    /**
     * Count the number of Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosCountArgs} args - Arguments to filter Todos to count.
     * @example
     * // Count the number of Todos
     * const count = await prisma.todos.count({
     *   where: {
     *     // ... the filter for the Todos we want to count
     *   }
     * })
    **/
    count<T extends TodosCountArgs>(
      args?: Subset<T, TodosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodosAggregateArgs>(args: Subset<T, TodosAggregateArgs>): PrismaPromise<GetTodosAggregateType<T>>

    /**
     * Group by Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodosGroupByArgs['orderBy'] }
        : { orderBy?: TodosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Todos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Todos_Comments<T extends Todos$Todos_CommentsArgs= {}>(args?: Subset<T, Todos$Todos_CommentsArgs>): PrismaPromise<Array<Todos_CommentsGetPayload<T>>| Null>;

    Todos_Tags<T extends Todos$Todos_TagsArgs= {}>(args?: Subset<T, Todos$Todos_TagsArgs>): PrismaPromise<Array<Todos_TagsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Todos base type for findUnique actions
   */
  export type TodosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter, which Todos to fetch.
     * 
    **/
    where: TodosWhereUniqueInput
  }

  /**
   * Todos findUnique
   */
  export interface TodosFindUniqueArgs extends TodosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos findUniqueOrThrow
   */
  export type TodosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter, which Todos to fetch.
     * 
    **/
    where: TodosWhereUniqueInput
  }


  /**
   * Todos base type for findFirst actions
   */
  export type TodosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter, which Todos to fetch.
     * 
    **/
    where?: TodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     * 
    **/
    orderBy?: Enumerable<TodosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos.
     * 
    **/
    cursor?: TodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos.
     * 
    **/
    distinct?: Enumerable<TodosScalarFieldEnum>
  }

  /**
   * Todos findFirst
   */
  export interface TodosFindFirstArgs extends TodosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos findFirstOrThrow
   */
  export type TodosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter, which Todos to fetch.
     * 
    **/
    where?: TodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     * 
    **/
    orderBy?: Enumerable<TodosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos.
     * 
    **/
    cursor?: TodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos.
     * 
    **/
    distinct?: Enumerable<TodosScalarFieldEnum>
  }


  /**
   * Todos findMany
   */
  export type TodosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter, which Todos to fetch.
     * 
    **/
    where?: TodosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos to fetch.
     * 
    **/
    orderBy?: Enumerable<TodosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Todos.
     * 
    **/
    cursor?: TodosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TodosScalarFieldEnum>
  }


  /**
   * Todos create
   */
  export type TodosCreateArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * The data needed to create a Todos.
     * 
    **/
    data: XOR<TodosCreateInput, TodosUncheckedCreateInput>
  }


  /**
   * Todos createMany
   */
  export type TodosCreateManyArgs = {
    /**
     * The data used to create many Todos.
     * 
    **/
    data: Enumerable<TodosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Todos update
   */
  export type TodosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * The data needed to update a Todos.
     * 
    **/
    data: XOR<TodosUpdateInput, TodosUncheckedUpdateInput>
    /**
     * Choose, which Todos to update.
     * 
    **/
    where: TodosWhereUniqueInput
  }


  /**
   * Todos updateMany
   */
  export type TodosUpdateManyArgs = {
    /**
     * The data used to update Todos.
     * 
    **/
    data: XOR<TodosUpdateManyMutationInput, TodosUncheckedUpdateManyInput>
    /**
     * Filter which Todos to update
     * 
    **/
    where?: TodosWhereInput
  }


  /**
   * Todos upsert
   */
  export type TodosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * The filter to search for the Todos to update in case it exists.
     * 
    **/
    where: TodosWhereUniqueInput
    /**
     * In case the Todos found by the `where` argument doesn't exist, create a new Todos with this data.
     * 
    **/
    create: XOR<TodosCreateInput, TodosUncheckedCreateInput>
    /**
     * In case the Todos was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TodosUpdateInput, TodosUncheckedUpdateInput>
  }


  /**
   * Todos delete
   */
  export type TodosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
    /**
     * Filter which Todos to delete.
     * 
    **/
    where: TodosWhereUniqueInput
  }


  /**
   * Todos deleteMany
   */
  export type TodosDeleteManyArgs = {
    /**
     * Filter which Todos to delete
     * 
    **/
    where?: TodosWhereInput
  }


  /**
   * Todos.Todos_Comments
   */
  export type Todos$Todos_CommentsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    where?: Todos_CommentsWhereInput
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    cursor?: Todos_CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Todos_CommentsScalarFieldEnum>
  }


  /**
   * Todos.Todos_Tags
   */
  export type Todos$Todos_TagsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    where?: Todos_TagsWhereInput
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    cursor?: Todos_TagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Todos_TagsScalarFieldEnum>
  }


  /**
   * Todos without action
   */
  export type TodosArgs = {
    /**
     * Select specific fields to fetch from the Todos
     * 
    **/
    select?: TodosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TodosInclude | null
  }



  /**
   * Model Comments
   */


  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number | null
  }

  export type CommentsSumAggregateOutputType = {
    id: number | null
  }

  export type CommentsMinAggregateOutputType = {
    id: number | null
    comment_author: string | null
    comment_text: string | null
    comment_avatar: string | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number | null
    comment_author: string | null
    comment_text: string | null
    comment_avatar: string | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    comment_author: number
    comment_text: number
    comment_avatar: number
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    comment_author?: true
    comment_text?: true
    comment_avatar?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    comment_author?: true
    comment_text?: true
    comment_avatar?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    comment_author?: true
    comment_text?: true
    comment_avatar?: true
    _all?: true
  }

  export type CommentsAggregateArgs = {
    /**
     * Filter which Comments to aggregate.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs = {
    where?: CommentsWhereInput
    orderBy?: Enumerable<CommentsOrderByWithAggregationInput>
    by: Array<CommentsScalarFieldEnum>
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _avg?: CommentsAvgAggregateInputType
    _sum?: CommentsSumAggregateInputType
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }


  export type CommentsGroupByOutputType = {
    id: number
    comment_author: string
    comment_text: string
    comment_avatar: string
    _count: CommentsCountAggregateOutputType | null
    _avg: CommentsAvgAggregateOutputType | null
    _sum: CommentsSumAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect = {
    id?: boolean
    comment_author?: boolean
    comment_text?: boolean
    comment_avatar?: boolean
    Todos_Comments?: boolean | Comments$Todos_CommentsArgs
    _count?: boolean | CommentsCountOutputTypeArgs
  }


  export type CommentsInclude = {
    Todos_Comments?: boolean | Comments$Todos_CommentsArgs
    _count?: boolean | CommentsCountOutputTypeArgs
  } 

  export type CommentsGetPayload<S extends boolean | null | undefined | CommentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comments :
    S extends undefined ? never :
    S extends { include: any } & (CommentsArgs | CommentsFindManyArgs)
    ? Comments  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Todos_Comments' ? Array < Todos_CommentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CommentsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentsArgs | CommentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Todos_Comments' ? Array < Todos_CommentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CommentsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Comments ? Comments[P] : never
  } 
      : Comments


  type CommentsCountArgs = Merge<
    Omit<CommentsFindManyArgs, 'select' | 'include'> & {
      select?: CommentsCountAggregateInputType | true
    }
  >

  export interface CommentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comments'> extends True ? Prisma__CommentsClient<CommentsGetPayload<T>> : Prisma__CommentsClient<CommentsGetPayload<T> | null, null>

    /**
     * Find one Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentsFindUniqueOrThrowArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comments'> extends True ? Prisma__CommentsClient<CommentsGetPayload<T>> : Prisma__CommentsClient<CommentsGetPayload<T> | null, null>

    /**
     * Find the first Comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentsFindFirstOrThrowArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentsFindManyArgs>(
      args?: SelectSubset<T, CommentsFindManyArgs>
    ): PrismaPromise<Array<CommentsGetPayload<T>>>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends CommentsCreateArgs>(
      args: SelectSubset<T, CommentsCreateArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comments = await prisma.comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentsCreateManyArgs>(
      args?: SelectSubset<T, CommentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends CommentsDeleteArgs>(
      args: SelectSubset<T, CommentsDeleteArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentsUpdateArgs>(
      args: SelectSubset<T, CommentsUpdateArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentsDeleteManyArgs>(
      args?: SelectSubset<T, CommentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentsUpdateManyArgs>(
      args: SelectSubset<T, CommentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends CommentsUpsertArgs>(
      args: SelectSubset<T, CommentsUpsertArgs>
    ): Prisma__CommentsClient<CommentsGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Todos_Comments<T extends Comments$Todos_CommentsArgs= {}>(args?: Subset<T, Comments$Todos_CommentsArgs>): PrismaPromise<Array<Todos_CommentsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comments base type for findUnique actions
   */
  export type CommentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUnique
   */
  export interface CommentsFindUniqueArgs extends CommentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments base type for findFirst actions
   */
  export type CommentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }

  /**
   * Comments findFirst
   */
  export interface CommentsFindFirstArgs extends CommentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * Comments create
   */
  export type CommentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to create a Comments.
     * 
    **/
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }


  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comments update
   */
  export type CommentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The data needed to update a Comments.
     * 
    **/
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentsWhereInput
  }


  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * The filter to search for the Comments to update in case it exists.
     * 
    **/
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     * 
    **/
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }


  /**
   * Comments delete
   */
  export type CommentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
    /**
     * Filter which Comments to delete.
     * 
    **/
    where: CommentsWhereUniqueInput
  }


  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentsWhereInput
  }


  /**
   * Comments.Todos_Comments
   */
  export type Comments$Todos_CommentsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    where?: Todos_CommentsWhereInput
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    cursor?: Todos_CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Todos_CommentsScalarFieldEnum>
  }


  /**
   * Comments without action
   */
  export type CommentsArgs = {
    /**
     * Select specific fields to fetch from the Comments
     * 
    **/
    select?: CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentsInclude | null
  }



  /**
   * Model Tags
   */


  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsAvgAggregateOutputType = {
    id: number | null
  }

  export type TagsSumAggregateOutputType = {
    id: number | null
  }

  export type TagsMinAggregateOutputType = {
    id: number | null
    tag_name: string | null
  }

  export type TagsMaxAggregateOutputType = {
    id: number | null
    tag_name: string | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    tag_name: number
    _all: number
  }


  export type TagsAvgAggregateInputType = {
    id?: true
  }

  export type TagsSumAggregateInputType = {
    id?: true
  }

  export type TagsMinAggregateInputType = {
    id?: true
    tag_name?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    tag_name?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    tag_name?: true
    _all?: true
  }

  export type TagsAggregateArgs = {
    /**
     * Filter which Tags to aggregate.
     * 
    **/
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type TagsGroupByArgs = {
    where?: TagsWhereInput
    orderBy?: Enumerable<TagsOrderByWithAggregationInput>
    by: Array<TagsScalarFieldEnum>
    having?: TagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _avg?: TagsAvgAggregateInputType
    _sum?: TagsSumAggregateInputType
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }


  export type TagsGroupByOutputType = {
    id: number
    tag_name: string
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends TagsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type TagsSelect = {
    id?: boolean
    tag_name?: boolean
    Todos_Tags?: boolean | Tags$Todos_TagsArgs
    _count?: boolean | TagsCountOutputTypeArgs
  }


  export type TagsInclude = {
    Todos_Tags?: boolean | Tags$Todos_TagsArgs
    _count?: boolean | TagsCountOutputTypeArgs
  } 

  export type TagsGetPayload<S extends boolean | null | undefined | TagsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Tags :
    S extends undefined ? never :
    S extends { include: any } & (TagsArgs | TagsFindManyArgs)
    ? Tags  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Todos_Tags' ? Array < Todos_TagsGetPayload<S['include'][P]>>  :
        P extends '_count' ? TagsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TagsArgs | TagsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Todos_Tags' ? Array < Todos_TagsGetPayload<S['select'][P]>>  :
        P extends '_count' ? TagsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tags ? Tags[P] : never
  } 
      : Tags


  type TagsCountArgs = Merge<
    Omit<TagsFindManyArgs, 'select' | 'include'> & {
      select?: TagsCountAggregateInputType | true
    }
  >

  export interface TagsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Tags that matches the filter.
     * @param {TagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tags'> extends True ? Prisma__TagsClient<TagsGetPayload<T>> : Prisma__TagsClient<TagsGetPayload<T> | null, null>

    /**
     * Find one Tags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TagsFindUniqueOrThrowArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tags'> extends True ? Prisma__TagsClient<TagsGetPayload<T>> : Prisma__TagsClient<TagsGetPayload<T> | null, null>

    /**
     * Find the first Tags that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TagsFindFirstOrThrowArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagsFindManyArgs>(
      args?: SelectSubset<T, TagsFindManyArgs>
    ): PrismaPromise<Array<TagsGetPayload<T>>>

    /**
     * Create a Tags.
     * @param {TagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
    **/
    create<T extends TagsCreateArgs>(
      args: SelectSubset<T, TagsCreateArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Create many Tags.
     *     @param {TagsCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tags = await prisma.tags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagsCreateManyArgs>(
      args?: SelectSubset<T, TagsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tags.
     * @param {TagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
    **/
    delete<T extends TagsDeleteArgs>(
      args: SelectSubset<T, TagsDeleteArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Update one Tags.
     * @param {TagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagsUpdateArgs>(
      args: SelectSubset<T, TagsUpdateArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Delete zero or more Tags.
     * @param {TagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagsDeleteManyArgs>(
      args?: SelectSubset<T, TagsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagsUpdateManyArgs>(
      args: SelectSubset<T, TagsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tags.
     * @param {TagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
    **/
    upsert<T extends TagsUpsertArgs>(
      args: SelectSubset<T, TagsUpsertArgs>
    ): Prisma__TagsClient<TagsGetPayload<T>>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagsCountArgs>(
      args?: Subset<T, TagsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsGroupByArgs['orderBy'] }
        : { orderBy?: TagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Todos_Tags<T extends Tags$Todos_TagsArgs= {}>(args?: Subset<T, Tags$Todos_TagsArgs>): PrismaPromise<Array<Todos_TagsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tags base type for findUnique actions
   */
  export type TagsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where: TagsWhereUniqueInput
  }

  /**
   * Tags findUnique
   */
  export interface TagsFindUniqueArgs extends TagsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tags findUniqueOrThrow
   */
  export type TagsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where: TagsWhereUniqueInput
  }


  /**
   * Tags base type for findFirst actions
   */
  export type TagsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagsScalarFieldEnum>
  }

  /**
   * Tags findFirst
   */
  export interface TagsFindFirstArgs extends TagsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tags findFirstOrThrow
   */
  export type TagsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     * 
    **/
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     * 
    **/
    distinct?: Enumerable<TagsScalarFieldEnum>
  }


  /**
   * Tags findMany
   */
  export type TagsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter, which Tags to fetch.
     * 
    **/
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     * 
    **/
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TagsScalarFieldEnum>
  }


  /**
   * Tags create
   */
  export type TagsCreateArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * The data needed to create a Tags.
     * 
    **/
    data: XOR<TagsCreateInput, TagsUncheckedCreateInput>
  }


  /**
   * Tags createMany
   */
  export type TagsCreateManyArgs = {
    /**
     * The data used to create many Tags.
     * 
    **/
    data: Enumerable<TagsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tags update
   */
  export type TagsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * The data needed to update a Tags.
     * 
    **/
    data: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
    /**
     * Choose, which Tags to update.
     * 
    **/
    where: TagsWhereUniqueInput
  }


  /**
   * Tags updateMany
   */
  export type TagsUpdateManyArgs = {
    /**
     * The data used to update Tags.
     * 
    **/
    data: XOR<TagsUpdateManyMutationInput, TagsUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     * 
    **/
    where?: TagsWhereInput
  }


  /**
   * Tags upsert
   */
  export type TagsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * The filter to search for the Tags to update in case it exists.
     * 
    **/
    where: TagsWhereUniqueInput
    /**
     * In case the Tags found by the `where` argument doesn't exist, create a new Tags with this data.
     * 
    **/
    create: XOR<TagsCreateInput, TagsUncheckedCreateInput>
    /**
     * In case the Tags was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
  }


  /**
   * Tags delete
   */
  export type TagsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
    /**
     * Filter which Tags to delete.
     * 
    **/
    where: TagsWhereUniqueInput
  }


  /**
   * Tags deleteMany
   */
  export type TagsDeleteManyArgs = {
    /**
     * Filter which Tags to delete
     * 
    **/
    where?: TagsWhereInput
  }


  /**
   * Tags.Todos_Tags
   */
  export type Tags$Todos_TagsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    where?: Todos_TagsWhereInput
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    cursor?: Todos_TagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Todos_TagsScalarFieldEnum>
  }


  /**
   * Tags without action
   */
  export type TagsArgs = {
    /**
     * Select specific fields to fetch from the Tags
     * 
    **/
    select?: TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TagsInclude | null
  }



  /**
   * Model Todos_Comments
   */


  export type AggregateTodos_Comments = {
    _count: Todos_CommentsCountAggregateOutputType | null
    _avg: Todos_CommentsAvgAggregateOutputType | null
    _sum: Todos_CommentsSumAggregateOutputType | null
    _min: Todos_CommentsMinAggregateOutputType | null
    _max: Todos_CommentsMaxAggregateOutputType | null
  }

  export type Todos_CommentsAvgAggregateOutputType = {
    id: number | null
    comment_id: number | null
    todo_id: number | null
  }

  export type Todos_CommentsSumAggregateOutputType = {
    id: number | null
    comment_id: number | null
    todo_id: number | null
  }

  export type Todos_CommentsMinAggregateOutputType = {
    id: number | null
    comment_id: number | null
    todo_id: number | null
  }

  export type Todos_CommentsMaxAggregateOutputType = {
    id: number | null
    comment_id: number | null
    todo_id: number | null
  }

  export type Todos_CommentsCountAggregateOutputType = {
    id: number
    comment_id: number
    todo_id: number
    _all: number
  }


  export type Todos_CommentsAvgAggregateInputType = {
    id?: true
    comment_id?: true
    todo_id?: true
  }

  export type Todos_CommentsSumAggregateInputType = {
    id?: true
    comment_id?: true
    todo_id?: true
  }

  export type Todos_CommentsMinAggregateInputType = {
    id?: true
    comment_id?: true
    todo_id?: true
  }

  export type Todos_CommentsMaxAggregateInputType = {
    id?: true
    comment_id?: true
    todo_id?: true
  }

  export type Todos_CommentsCountAggregateInputType = {
    id?: true
    comment_id?: true
    todo_id?: true
    _all?: true
  }

  export type Todos_CommentsAggregateArgs = {
    /**
     * Filter which Todos_Comments to aggregate.
     * 
    **/
    where?: Todos_CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Todos_CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Todos_Comments
    **/
    _count?: true | Todos_CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Todos_CommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Todos_CommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Todos_CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Todos_CommentsMaxAggregateInputType
  }

  export type GetTodos_CommentsAggregateType<T extends Todos_CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateTodos_Comments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodos_Comments[P]>
      : GetScalarType<T[P], AggregateTodos_Comments[P]>
  }




  export type Todos_CommentsGroupByArgs = {
    where?: Todos_CommentsWhereInput
    orderBy?: Enumerable<Todos_CommentsOrderByWithAggregationInput>
    by: Array<Todos_CommentsScalarFieldEnum>
    having?: Todos_CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Todos_CommentsCountAggregateInputType | true
    _avg?: Todos_CommentsAvgAggregateInputType
    _sum?: Todos_CommentsSumAggregateInputType
    _min?: Todos_CommentsMinAggregateInputType
    _max?: Todos_CommentsMaxAggregateInputType
  }


  export type Todos_CommentsGroupByOutputType = {
    id: number
    comment_id: number
    todo_id: number
    _count: Todos_CommentsCountAggregateOutputType | null
    _avg: Todos_CommentsAvgAggregateOutputType | null
    _sum: Todos_CommentsSumAggregateOutputType | null
    _min: Todos_CommentsMinAggregateOutputType | null
    _max: Todos_CommentsMaxAggregateOutputType | null
  }

  type GetTodos_CommentsGroupByPayload<T extends Todos_CommentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Todos_CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Todos_CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Todos_CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], Todos_CommentsGroupByOutputType[P]>
        }
      >
    >


  export type Todos_CommentsSelect = {
    id?: boolean
    comment_id?: boolean
    todo_id?: boolean
    Comments?: boolean | CommentsArgs
    Todos?: boolean | TodosArgs
  }


  export type Todos_CommentsInclude = {
    Comments?: boolean | CommentsArgs
    Todos?: boolean | TodosArgs
  } 

  export type Todos_CommentsGetPayload<S extends boolean | null | undefined | Todos_CommentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Todos_Comments :
    S extends undefined ? never :
    S extends { include: any } & (Todos_CommentsArgs | Todos_CommentsFindManyArgs)
    ? Todos_Comments  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Comments' ? CommentsGetPayload<S['include'][P]> :
        P extends 'Todos' ? TodosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Todos_CommentsArgs | Todos_CommentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Comments' ? CommentsGetPayload<S['select'][P]> :
        P extends 'Todos' ? TodosGetPayload<S['select'][P]> :  P extends keyof Todos_Comments ? Todos_Comments[P] : never
  } 
      : Todos_Comments


  type Todos_CommentsCountArgs = Merge<
    Omit<Todos_CommentsFindManyArgs, 'select' | 'include'> & {
      select?: Todos_CommentsCountAggregateInputType | true
    }
  >

  export interface Todos_CommentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Todos_Comments that matches the filter.
     * @param {Todos_CommentsFindUniqueArgs} args - Arguments to find a Todos_Comments
     * @example
     * // Get one Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Todos_CommentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Todos_CommentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Todos_Comments'> extends True ? Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>> : Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T> | null, null>

    /**
     * Find one Todos_Comments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Todos_CommentsFindUniqueOrThrowArgs} args - Arguments to find a Todos_Comments
     * @example
     * // Get one Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Todos_CommentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Todos_CommentsFindUniqueOrThrowArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Find the first Todos_Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsFindFirstArgs} args - Arguments to find a Todos_Comments
     * @example
     * // Get one Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Todos_CommentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Todos_CommentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Todos_Comments'> extends True ? Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>> : Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T> | null, null>

    /**
     * Find the first Todos_Comments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsFindFirstOrThrowArgs} args - Arguments to find a Todos_Comments
     * @example
     * // Get one Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Todos_CommentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Todos_CommentsFindFirstOrThrowArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Find zero or more Todos_Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findMany()
     * 
     * // Get first 10 Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todos_CommentsWithIdOnly = await prisma.todos_Comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Todos_CommentsFindManyArgs>(
      args?: SelectSubset<T, Todos_CommentsFindManyArgs>
    ): PrismaPromise<Array<Todos_CommentsGetPayload<T>>>

    /**
     * Create a Todos_Comments.
     * @param {Todos_CommentsCreateArgs} args - Arguments to create a Todos_Comments.
     * @example
     * // Create one Todos_Comments
     * const Todos_Comments = await prisma.todos_Comments.create({
     *   data: {
     *     // ... data to create a Todos_Comments
     *   }
     * })
     * 
    **/
    create<T extends Todos_CommentsCreateArgs>(
      args: SelectSubset<T, Todos_CommentsCreateArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Create many Todos_Comments.
     *     @param {Todos_CommentsCreateManyArgs} args - Arguments to create many Todos_Comments.
     *     @example
     *     // Create many Todos_Comments
     *     const todos_Comments = await prisma.todos_Comments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Todos_CommentsCreateManyArgs>(
      args?: SelectSubset<T, Todos_CommentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Todos_Comments.
     * @param {Todos_CommentsDeleteArgs} args - Arguments to delete one Todos_Comments.
     * @example
     * // Delete one Todos_Comments
     * const Todos_Comments = await prisma.todos_Comments.delete({
     *   where: {
     *     // ... filter to delete one Todos_Comments
     *   }
     * })
     * 
    **/
    delete<T extends Todos_CommentsDeleteArgs>(
      args: SelectSubset<T, Todos_CommentsDeleteArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Update one Todos_Comments.
     * @param {Todos_CommentsUpdateArgs} args - Arguments to update one Todos_Comments.
     * @example
     * // Update one Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Todos_CommentsUpdateArgs>(
      args: SelectSubset<T, Todos_CommentsUpdateArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Delete zero or more Todos_Comments.
     * @param {Todos_CommentsDeleteManyArgs} args - Arguments to filter Todos_Comments to delete.
     * @example
     * // Delete a few Todos_Comments
     * const { count } = await prisma.todos_Comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Todos_CommentsDeleteManyArgs>(
      args?: SelectSubset<T, Todos_CommentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Todos_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Todos_CommentsUpdateManyArgs>(
      args: SelectSubset<T, Todos_CommentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Todos_Comments.
     * @param {Todos_CommentsUpsertArgs} args - Arguments to update or create a Todos_Comments.
     * @example
     * // Update or create a Todos_Comments
     * const todos_Comments = await prisma.todos_Comments.upsert({
     *   create: {
     *     // ... data to create a Todos_Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Todos_Comments we want to update
     *   }
     * })
    **/
    upsert<T extends Todos_CommentsUpsertArgs>(
      args: SelectSubset<T, Todos_CommentsUpsertArgs>
    ): Prisma__Todos_CommentsClient<Todos_CommentsGetPayload<T>>

    /**
     * Count the number of Todos_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsCountArgs} args - Arguments to filter Todos_Comments to count.
     * @example
     * // Count the number of Todos_Comments
     * const count = await prisma.todos_Comments.count({
     *   where: {
     *     // ... the filter for the Todos_Comments we want to count
     *   }
     * })
    **/
    count<T extends Todos_CommentsCountArgs>(
      args?: Subset<T, Todos_CommentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Todos_CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Todos_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Todos_CommentsAggregateArgs>(args: Subset<T, Todos_CommentsAggregateArgs>): PrismaPromise<GetTodos_CommentsAggregateType<T>>

    /**
     * Group by Todos_Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Todos_CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Todos_CommentsGroupByArgs['orderBy'] }
        : { orderBy?: Todos_CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Todos_CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodos_CommentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Todos_Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Todos_CommentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Comments<T extends CommentsArgs= {}>(args?: Subset<T, CommentsArgs>): Prisma__CommentsClient<CommentsGetPayload<T> | Null>;

    Todos<T extends TodosArgs= {}>(args?: Subset<T, TodosArgs>): Prisma__TodosClient<TodosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Todos_Comments base type for findUnique actions
   */
  export type Todos_CommentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter, which Todos_Comments to fetch.
     * 
    **/
    where: Todos_CommentsWhereUniqueInput
  }

  /**
   * Todos_Comments findUnique
   */
  export interface Todos_CommentsFindUniqueArgs extends Todos_CommentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos_Comments findUniqueOrThrow
   */
  export type Todos_CommentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter, which Todos_Comments to fetch.
     * 
    **/
    where: Todos_CommentsWhereUniqueInput
  }


  /**
   * Todos_Comments base type for findFirst actions
   */
  export type Todos_CommentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter, which Todos_Comments to fetch.
     * 
    **/
    where?: Todos_CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos_Comments.
     * 
    **/
    cursor?: Todos_CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos_Comments.
     * 
    **/
    distinct?: Enumerable<Todos_CommentsScalarFieldEnum>
  }

  /**
   * Todos_Comments findFirst
   */
  export interface Todos_CommentsFindFirstArgs extends Todos_CommentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos_Comments findFirstOrThrow
   */
  export type Todos_CommentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter, which Todos_Comments to fetch.
     * 
    **/
    where?: Todos_CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos_Comments.
     * 
    **/
    cursor?: Todos_CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos_Comments.
     * 
    **/
    distinct?: Enumerable<Todos_CommentsScalarFieldEnum>
  }


  /**
   * Todos_Comments findMany
   */
  export type Todos_CommentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter, which Todos_Comments to fetch.
     * 
    **/
    where?: Todos_CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_CommentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Todos_Comments.
     * 
    **/
    cursor?: Todos_CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Todos_CommentsScalarFieldEnum>
  }


  /**
   * Todos_Comments create
   */
  export type Todos_CommentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * The data needed to create a Todos_Comments.
     * 
    **/
    data: XOR<Todos_CommentsCreateInput, Todos_CommentsUncheckedCreateInput>
  }


  /**
   * Todos_Comments createMany
   */
  export type Todos_CommentsCreateManyArgs = {
    /**
     * The data used to create many Todos_Comments.
     * 
    **/
    data: Enumerable<Todos_CommentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Todos_Comments update
   */
  export type Todos_CommentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * The data needed to update a Todos_Comments.
     * 
    **/
    data: XOR<Todos_CommentsUpdateInput, Todos_CommentsUncheckedUpdateInput>
    /**
     * Choose, which Todos_Comments to update.
     * 
    **/
    where: Todos_CommentsWhereUniqueInput
  }


  /**
   * Todos_Comments updateMany
   */
  export type Todos_CommentsUpdateManyArgs = {
    /**
     * The data used to update Todos_Comments.
     * 
    **/
    data: XOR<Todos_CommentsUpdateManyMutationInput, Todos_CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Todos_Comments to update
     * 
    **/
    where?: Todos_CommentsWhereInput
  }


  /**
   * Todos_Comments upsert
   */
  export type Todos_CommentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * The filter to search for the Todos_Comments to update in case it exists.
     * 
    **/
    where: Todos_CommentsWhereUniqueInput
    /**
     * In case the Todos_Comments found by the `where` argument doesn't exist, create a new Todos_Comments with this data.
     * 
    **/
    create: XOR<Todos_CommentsCreateInput, Todos_CommentsUncheckedCreateInput>
    /**
     * In case the Todos_Comments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Todos_CommentsUpdateInput, Todos_CommentsUncheckedUpdateInput>
  }


  /**
   * Todos_Comments delete
   */
  export type Todos_CommentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
    /**
     * Filter which Todos_Comments to delete.
     * 
    **/
    where: Todos_CommentsWhereUniqueInput
  }


  /**
   * Todos_Comments deleteMany
   */
  export type Todos_CommentsDeleteManyArgs = {
    /**
     * Filter which Todos_Comments to delete
     * 
    **/
    where?: Todos_CommentsWhereInput
  }


  /**
   * Todos_Comments without action
   */
  export type Todos_CommentsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Comments
     * 
    **/
    select?: Todos_CommentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_CommentsInclude | null
  }



  /**
   * Model Todos_Tags
   */


  export type AggregateTodos_Tags = {
    _count: Todos_TagsCountAggregateOutputType | null
    _avg: Todos_TagsAvgAggregateOutputType | null
    _sum: Todos_TagsSumAggregateOutputType | null
    _min: Todos_TagsMinAggregateOutputType | null
    _max: Todos_TagsMaxAggregateOutputType | null
  }

  export type Todos_TagsAvgAggregateOutputType = {
    id: number | null
    todo_id: number | null
    tag_id: number | null
  }

  export type Todos_TagsSumAggregateOutputType = {
    id: number | null
    todo_id: number | null
    tag_id: number | null
  }

  export type Todos_TagsMinAggregateOutputType = {
    id: number | null
    todo_id: number | null
    tag_id: number | null
  }

  export type Todos_TagsMaxAggregateOutputType = {
    id: number | null
    todo_id: number | null
    tag_id: number | null
  }

  export type Todos_TagsCountAggregateOutputType = {
    id: number
    todo_id: number
    tag_id: number
    _all: number
  }


  export type Todos_TagsAvgAggregateInputType = {
    id?: true
    todo_id?: true
    tag_id?: true
  }

  export type Todos_TagsSumAggregateInputType = {
    id?: true
    todo_id?: true
    tag_id?: true
  }

  export type Todos_TagsMinAggregateInputType = {
    id?: true
    todo_id?: true
    tag_id?: true
  }

  export type Todos_TagsMaxAggregateInputType = {
    id?: true
    todo_id?: true
    tag_id?: true
  }

  export type Todos_TagsCountAggregateInputType = {
    id?: true
    todo_id?: true
    tag_id?: true
    _all?: true
  }

  export type Todos_TagsAggregateArgs = {
    /**
     * Filter which Todos_Tags to aggregate.
     * 
    **/
    where?: Todos_TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Todos_TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Todos_Tags
    **/
    _count?: true | Todos_TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Todos_TagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Todos_TagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Todos_TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Todos_TagsMaxAggregateInputType
  }

  export type GetTodos_TagsAggregateType<T extends Todos_TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTodos_Tags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodos_Tags[P]>
      : GetScalarType<T[P], AggregateTodos_Tags[P]>
  }




  export type Todos_TagsGroupByArgs = {
    where?: Todos_TagsWhereInput
    orderBy?: Enumerable<Todos_TagsOrderByWithAggregationInput>
    by: Array<Todos_TagsScalarFieldEnum>
    having?: Todos_TagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Todos_TagsCountAggregateInputType | true
    _avg?: Todos_TagsAvgAggregateInputType
    _sum?: Todos_TagsSumAggregateInputType
    _min?: Todos_TagsMinAggregateInputType
    _max?: Todos_TagsMaxAggregateInputType
  }


  export type Todos_TagsGroupByOutputType = {
    id: number
    todo_id: number
    tag_id: number
    _count: Todos_TagsCountAggregateOutputType | null
    _avg: Todos_TagsAvgAggregateOutputType | null
    _sum: Todos_TagsSumAggregateOutputType | null
    _min: Todos_TagsMinAggregateOutputType | null
    _max: Todos_TagsMaxAggregateOutputType | null
  }

  type GetTodos_TagsGroupByPayload<T extends Todos_TagsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Todos_TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Todos_TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Todos_TagsGroupByOutputType[P]>
            : GetScalarType<T[P], Todos_TagsGroupByOutputType[P]>
        }
      >
    >


  export type Todos_TagsSelect = {
    id?: boolean
    todo_id?: boolean
    tag_id?: boolean
    Tags?: boolean | TagsArgs
    Todos?: boolean | TodosArgs
  }


  export type Todos_TagsInclude = {
    Tags?: boolean | TagsArgs
    Todos?: boolean | TodosArgs
  } 

  export type Todos_TagsGetPayload<S extends boolean | null | undefined | Todos_TagsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Todos_Tags :
    S extends undefined ? never :
    S extends { include: any } & (Todos_TagsArgs | Todos_TagsFindManyArgs)
    ? Todos_Tags  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Tags' ? TagsGetPayload<S['include'][P]> :
        P extends 'Todos' ? TodosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (Todos_TagsArgs | Todos_TagsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Tags' ? TagsGetPayload<S['select'][P]> :
        P extends 'Todos' ? TodosGetPayload<S['select'][P]> :  P extends keyof Todos_Tags ? Todos_Tags[P] : never
  } 
      : Todos_Tags


  type Todos_TagsCountArgs = Merge<
    Omit<Todos_TagsFindManyArgs, 'select' | 'include'> & {
      select?: Todos_TagsCountAggregateInputType | true
    }
  >

  export interface Todos_TagsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Todos_Tags that matches the filter.
     * @param {Todos_TagsFindUniqueArgs} args - Arguments to find a Todos_Tags
     * @example
     * // Get one Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Todos_TagsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Todos_TagsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Todos_Tags'> extends True ? Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>> : Prisma__Todos_TagsClient<Todos_TagsGetPayload<T> | null, null>

    /**
     * Find one Todos_Tags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Todos_TagsFindUniqueOrThrowArgs} args - Arguments to find a Todos_Tags
     * @example
     * // Get one Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Todos_TagsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, Todos_TagsFindUniqueOrThrowArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Find the first Todos_Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsFindFirstArgs} args - Arguments to find a Todos_Tags
     * @example
     * // Get one Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Todos_TagsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Todos_TagsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Todos_Tags'> extends True ? Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>> : Prisma__Todos_TagsClient<Todos_TagsGetPayload<T> | null, null>

    /**
     * Find the first Todos_Tags that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsFindFirstOrThrowArgs} args - Arguments to find a Todos_Tags
     * @example
     * // Get one Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Todos_TagsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, Todos_TagsFindFirstOrThrowArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Find zero or more Todos_Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findMany()
     * 
     * // Get first 10 Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todos_TagsWithIdOnly = await prisma.todos_Tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Todos_TagsFindManyArgs>(
      args?: SelectSubset<T, Todos_TagsFindManyArgs>
    ): PrismaPromise<Array<Todos_TagsGetPayload<T>>>

    /**
     * Create a Todos_Tags.
     * @param {Todos_TagsCreateArgs} args - Arguments to create a Todos_Tags.
     * @example
     * // Create one Todos_Tags
     * const Todos_Tags = await prisma.todos_Tags.create({
     *   data: {
     *     // ... data to create a Todos_Tags
     *   }
     * })
     * 
    **/
    create<T extends Todos_TagsCreateArgs>(
      args: SelectSubset<T, Todos_TagsCreateArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Create many Todos_Tags.
     *     @param {Todos_TagsCreateManyArgs} args - Arguments to create many Todos_Tags.
     *     @example
     *     // Create many Todos_Tags
     *     const todos_Tags = await prisma.todos_Tags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Todos_TagsCreateManyArgs>(
      args?: SelectSubset<T, Todos_TagsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Todos_Tags.
     * @param {Todos_TagsDeleteArgs} args - Arguments to delete one Todos_Tags.
     * @example
     * // Delete one Todos_Tags
     * const Todos_Tags = await prisma.todos_Tags.delete({
     *   where: {
     *     // ... filter to delete one Todos_Tags
     *   }
     * })
     * 
    **/
    delete<T extends Todos_TagsDeleteArgs>(
      args: SelectSubset<T, Todos_TagsDeleteArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Update one Todos_Tags.
     * @param {Todos_TagsUpdateArgs} args - Arguments to update one Todos_Tags.
     * @example
     * // Update one Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Todos_TagsUpdateArgs>(
      args: SelectSubset<T, Todos_TagsUpdateArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Delete zero or more Todos_Tags.
     * @param {Todos_TagsDeleteManyArgs} args - Arguments to filter Todos_Tags to delete.
     * @example
     * // Delete a few Todos_Tags
     * const { count } = await prisma.todos_Tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Todos_TagsDeleteManyArgs>(
      args?: SelectSubset<T, Todos_TagsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Todos_Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Todos_TagsUpdateManyArgs>(
      args: SelectSubset<T, Todos_TagsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Todos_Tags.
     * @param {Todos_TagsUpsertArgs} args - Arguments to update or create a Todos_Tags.
     * @example
     * // Update or create a Todos_Tags
     * const todos_Tags = await prisma.todos_Tags.upsert({
     *   create: {
     *     // ... data to create a Todos_Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Todos_Tags we want to update
     *   }
     * })
    **/
    upsert<T extends Todos_TagsUpsertArgs>(
      args: SelectSubset<T, Todos_TagsUpsertArgs>
    ): Prisma__Todos_TagsClient<Todos_TagsGetPayload<T>>

    /**
     * Count the number of Todos_Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsCountArgs} args - Arguments to filter Todos_Tags to count.
     * @example
     * // Count the number of Todos_Tags
     * const count = await prisma.todos_Tags.count({
     *   where: {
     *     // ... the filter for the Todos_Tags we want to count
     *   }
     * })
    **/
    count<T extends Todos_TagsCountArgs>(
      args?: Subset<T, Todos_TagsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Todos_TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Todos_Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Todos_TagsAggregateArgs>(args: Subset<T, Todos_TagsAggregateArgs>): PrismaPromise<GetTodos_TagsAggregateType<T>>

    /**
     * Group by Todos_Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Todos_TagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Todos_TagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Todos_TagsGroupByArgs['orderBy'] }
        : { orderBy?: Todos_TagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Todos_TagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodos_TagsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Todos_Tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Todos_TagsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Tags<T extends TagsArgs= {}>(args?: Subset<T, TagsArgs>): Prisma__TagsClient<TagsGetPayload<T> | Null>;

    Todos<T extends TodosArgs= {}>(args?: Subset<T, TodosArgs>): Prisma__TodosClient<TodosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Todos_Tags base type for findUnique actions
   */
  export type Todos_TagsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter, which Todos_Tags to fetch.
     * 
    **/
    where: Todos_TagsWhereUniqueInput
  }

  /**
   * Todos_Tags findUnique
   */
  export interface Todos_TagsFindUniqueArgs extends Todos_TagsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos_Tags findUniqueOrThrow
   */
  export type Todos_TagsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter, which Todos_Tags to fetch.
     * 
    **/
    where: Todos_TagsWhereUniqueInput
  }


  /**
   * Todos_Tags base type for findFirst actions
   */
  export type Todos_TagsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter, which Todos_Tags to fetch.
     * 
    **/
    where?: Todos_TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos_Tags.
     * 
    **/
    cursor?: Todos_TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos_Tags.
     * 
    **/
    distinct?: Enumerable<Todos_TagsScalarFieldEnum>
  }

  /**
   * Todos_Tags findFirst
   */
  export interface Todos_TagsFindFirstArgs extends Todos_TagsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Todos_Tags findFirstOrThrow
   */
  export type Todos_TagsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter, which Todos_Tags to fetch.
     * 
    **/
    where?: Todos_TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Todos_Tags.
     * 
    **/
    cursor?: Todos_TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Tags.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Todos_Tags.
     * 
    **/
    distinct?: Enumerable<Todos_TagsScalarFieldEnum>
  }


  /**
   * Todos_Tags findMany
   */
  export type Todos_TagsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter, which Todos_Tags to fetch.
     * 
    **/
    where?: Todos_TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Todos_Tags to fetch.
     * 
    **/
    orderBy?: Enumerable<Todos_TagsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Todos_Tags.
     * 
    **/
    cursor?: Todos_TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Todos_Tags from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Todos_Tags.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Todos_TagsScalarFieldEnum>
  }


  /**
   * Todos_Tags create
   */
  export type Todos_TagsCreateArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * The data needed to create a Todos_Tags.
     * 
    **/
    data: XOR<Todos_TagsCreateInput, Todos_TagsUncheckedCreateInput>
  }


  /**
   * Todos_Tags createMany
   */
  export type Todos_TagsCreateManyArgs = {
    /**
     * The data used to create many Todos_Tags.
     * 
    **/
    data: Enumerable<Todos_TagsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Todos_Tags update
   */
  export type Todos_TagsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * The data needed to update a Todos_Tags.
     * 
    **/
    data: XOR<Todos_TagsUpdateInput, Todos_TagsUncheckedUpdateInput>
    /**
     * Choose, which Todos_Tags to update.
     * 
    **/
    where: Todos_TagsWhereUniqueInput
  }


  /**
   * Todos_Tags updateMany
   */
  export type Todos_TagsUpdateManyArgs = {
    /**
     * The data used to update Todos_Tags.
     * 
    **/
    data: XOR<Todos_TagsUpdateManyMutationInput, Todos_TagsUncheckedUpdateManyInput>
    /**
     * Filter which Todos_Tags to update
     * 
    **/
    where?: Todos_TagsWhereInput
  }


  /**
   * Todos_Tags upsert
   */
  export type Todos_TagsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * The filter to search for the Todos_Tags to update in case it exists.
     * 
    **/
    where: Todos_TagsWhereUniqueInput
    /**
     * In case the Todos_Tags found by the `where` argument doesn't exist, create a new Todos_Tags with this data.
     * 
    **/
    create: XOR<Todos_TagsCreateInput, Todos_TagsUncheckedCreateInput>
    /**
     * In case the Todos_Tags was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Todos_TagsUpdateInput, Todos_TagsUncheckedUpdateInput>
  }


  /**
   * Todos_Tags delete
   */
  export type Todos_TagsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
    /**
     * Filter which Todos_Tags to delete.
     * 
    **/
    where: Todos_TagsWhereUniqueInput
  }


  /**
   * Todos_Tags deleteMany
   */
  export type Todos_TagsDeleteManyArgs = {
    /**
     * Filter which Todos_Tags to delete
     * 
    **/
    where?: Todos_TagsWhereInput
  }


  /**
   * Todos_Tags without action
   */
  export type Todos_TagsArgs = {
    /**
     * Select specific fields to fetch from the Todos_Tags
     * 
    **/
    select?: Todos_TagsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Todos_TagsInclude | null
  }



  /**
   * Model profiles
   */


  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: string | null
    updated_at: Date | null
    username: string | null
    full_name: string | null
    avatar_url: string | null
    website: string | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: string | null
    updated_at: Date | null
    username: string | null
    full_name: string | null
    avatar_url: string | null
    website: string | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    updated_at: number
    username: number
    full_name: number
    avatar_url: number
    website: number
    _all: number
  }


  export type ProfilesMinAggregateInputType = {
    id?: true
    updated_at?: true
    username?: true
    full_name?: true
    avatar_url?: true
    website?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    updated_at?: true
    username?: true
    full_name?: true
    avatar_url?: true
    website?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    updated_at?: true
    username?: true
    full_name?: true
    avatar_url?: true
    website?: true
    _all?: true
  }

  export type ProfilesAggregateArgs = {
    /**
     * Filter which profiles to aggregate.
     * 
    **/
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<profilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type ProfilesGroupByArgs = {
    where?: profilesWhereInput
    orderBy?: Enumerable<profilesOrderByWithAggregationInput>
    by: Array<ProfilesScalarFieldEnum>
    having?: profilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }


  export type ProfilesGroupByOutputType = {
    id: string
    updated_at: Date | null
    username: string | null
    full_name: string | null
    avatar_url: string | null
    website: string | null
    _count: ProfilesCountAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends ProfilesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type profilesSelect = {
    id?: boolean
    updated_at?: boolean
    username?: boolean
    full_name?: boolean
    avatar_url?: boolean
    website?: boolean
  }


  export type profilesGetPayload<S extends boolean | null | undefined | profilesArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? profiles :
    S extends undefined ? never :
    S extends { include: any } & (profilesArgs | profilesFindManyArgs)
    ? profiles 
    : S extends { select: any } & (profilesArgs | profilesFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof profiles ? profiles[P] : never
  } 
      : profiles


  type profilesCountArgs = Merge<
    Omit<profilesFindManyArgs, 'select' | 'include'> & {
      select?: ProfilesCountAggregateInputType | true
    }
  >

  export interface profilesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {profilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends profilesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, profilesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'profiles'> extends True ? Prisma__profilesClient<profilesGetPayload<T>> : Prisma__profilesClient<profilesGetPayload<T> | null, null>

    /**
     * Find one Profiles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {profilesFindUniqueOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends profilesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, profilesFindUniqueOrThrowArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends profilesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, profilesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'profiles'> extends True ? Prisma__profilesClient<profilesGetPayload<T>> : Prisma__profilesClient<profilesGetPayload<T> | null, null>

    /**
     * Find the first Profiles that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindFirstOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends profilesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, profilesFindFirstOrThrowArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends profilesFindManyArgs>(
      args?: SelectSubset<T, profilesFindManyArgs>
    ): PrismaPromise<Array<profilesGetPayload<T>>>

    /**
     * Create a Profiles.
     * @param {profilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
    **/
    create<T extends profilesCreateArgs>(
      args: SelectSubset<T, profilesCreateArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {profilesCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profiles = await prisma.profiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends profilesCreateManyArgs>(
      args?: SelectSubset<T, profilesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profiles.
     * @param {profilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
    **/
    delete<T extends profilesDeleteArgs>(
      args: SelectSubset<T, profilesDeleteArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Update one Profiles.
     * @param {profilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends profilesUpdateArgs>(
      args: SelectSubset<T, profilesUpdateArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {profilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends profilesDeleteManyArgs>(
      args?: SelectSubset<T, profilesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends profilesUpdateManyArgs>(
      args: SelectSubset<T, profilesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profiles.
     * @param {profilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
    **/
    upsert<T extends profilesUpsertArgs>(
      args: SelectSubset<T, profilesUpsertArgs>
    ): Prisma__profilesClient<profilesGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends profilesCountArgs>(
      args?: Subset<T, profilesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__profilesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * profiles base type for findUnique actions
   */
  export type profilesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
     * 
    **/
    where: profilesWhereUniqueInput
  }

  /**
   * profiles findUnique
   */
  export interface profilesFindUniqueArgs extends profilesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * profiles findUniqueOrThrow
   */
  export type profilesFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
     * 
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles base type for findFirst actions
   */
  export type profilesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
     * 
    **/
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<profilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     * 
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     * 
    **/
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }

  /**
   * profiles findFirst
   */
  export interface profilesFindFirstArgs extends profilesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * profiles findFirstOrThrow
   */
  export type profilesFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
     * 
    **/
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<profilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profiles.
     * 
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profiles.
     * 
    **/
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * profiles findMany
   */
  export type profilesFindManyArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter, which profiles to fetch.
     * 
    **/
    where?: profilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<profilesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profiles.
     * 
    **/
    cursor?: profilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfilesScalarFieldEnum>
  }


  /**
   * profiles create
   */
  export type profilesCreateArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * The data needed to create a profiles.
     * 
    **/
    data: XOR<profilesCreateInput, profilesUncheckedCreateInput>
  }


  /**
   * profiles createMany
   */
  export type profilesCreateManyArgs = {
    /**
     * The data used to create many profiles.
     * 
    **/
    data: Enumerable<profilesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * profiles update
   */
  export type profilesUpdateArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * The data needed to update a profiles.
     * 
    **/
    data: XOR<profilesUpdateInput, profilesUncheckedUpdateInput>
    /**
     * Choose, which profiles to update.
     * 
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles updateMany
   */
  export type profilesUpdateManyArgs = {
    /**
     * The data used to update profiles.
     * 
    **/
    data: XOR<profilesUpdateManyMutationInput, profilesUncheckedUpdateManyInput>
    /**
     * Filter which profiles to update
     * 
    **/
    where?: profilesWhereInput
  }


  /**
   * profiles upsert
   */
  export type profilesUpsertArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * The filter to search for the profiles to update in case it exists.
     * 
    **/
    where: profilesWhereUniqueInput
    /**
     * In case the profiles found by the `where` argument doesn't exist, create a new profiles with this data.
     * 
    **/
    create: XOR<profilesCreateInput, profilesUncheckedCreateInput>
    /**
     * In case the profiles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<profilesUpdateInput, profilesUncheckedUpdateInput>
  }


  /**
   * profiles delete
   */
  export type profilesDeleteArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
    /**
     * Filter which profiles to delete.
     * 
    **/
    where: profilesWhereUniqueInput
  }


  /**
   * profiles deleteMany
   */
  export type profilesDeleteManyArgs = {
    /**
     * Filter which profiles to delete
     * 
    **/
    where?: profilesWhereInput
  }


  /**
   * profiles without action
   */
  export type profilesArgs = {
    /**
     * Select specific fields to fetch from the profiles
     * 
    **/
    select?: profilesSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CommentsScalarFieldEnum: {
    id: 'id',
    comment_author: 'comment_author',
    comment_text: 'comment_text',
    comment_avatar: 'comment_avatar'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    updated_at: 'updated_at',
    username: 'username',
    full_name: 'full_name',
    avatar_url: 'avatar_url',
    website: 'website'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TagsScalarFieldEnum: {
    id: 'id',
    tag_name: 'tag_name'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const TodosScalarFieldEnum: {
    id: 'id',
    complete_date: 'complete_date',
    description: 'description',
    location: 'location',
    status: 'status',
    todo_name: 'todo_name'
  };

  export type TodosScalarFieldEnum = (typeof TodosScalarFieldEnum)[keyof typeof TodosScalarFieldEnum]


  export const Todos_CommentsScalarFieldEnum: {
    id: 'id',
    comment_id: 'comment_id',
    todo_id: 'todo_id'
  };

  export type Todos_CommentsScalarFieldEnum = (typeof Todos_CommentsScalarFieldEnum)[keyof typeof Todos_CommentsScalarFieldEnum]


  export const Todos_TagsScalarFieldEnum: {
    id: 'id',
    todo_id: 'todo_id',
    tag_id: 'tag_id'
  };

  export type Todos_TagsScalarFieldEnum = (typeof Todos_TagsScalarFieldEnum)[keyof typeof Todos_TagsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type TodosWhereInput = {
    AND?: Enumerable<TodosWhereInput>
    OR?: Enumerable<TodosWhereInput>
    NOT?: Enumerable<TodosWhereInput>
    id?: IntFilter | number
    complete_date?: DateTimeNullableFilter | Date | string | null
    description?: StringNullableFilter | string | null
    location?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    todo_name?: StringFilter | string
    Todos_Comments?: Todos_CommentsListRelationFilter
    Todos_Tags?: Todos_TagsListRelationFilter
  }

  export type TodosOrderByWithRelationInput = {
    id?: SortOrder
    complete_date?: SortOrder
    description?: SortOrder
    location?: SortOrder
    status?: SortOrder
    todo_name?: SortOrder
    Todos_Comments?: Todos_CommentsOrderByRelationAggregateInput
    Todos_Tags?: Todos_TagsOrderByRelationAggregateInput
  }

  export type TodosWhereUniqueInput = {
    id?: number
    todo_name?: string
  }

  export type TodosOrderByWithAggregationInput = {
    id?: SortOrder
    complete_date?: SortOrder
    description?: SortOrder
    location?: SortOrder
    status?: SortOrder
    todo_name?: SortOrder
    _count?: TodosCountOrderByAggregateInput
    _avg?: TodosAvgOrderByAggregateInput
    _max?: TodosMaxOrderByAggregateInput
    _min?: TodosMinOrderByAggregateInput
    _sum?: TodosSumOrderByAggregateInput
  }

  export type TodosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodosScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    complete_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    location?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
    todo_name?: StringWithAggregatesFilter | string
  }

  export type CommentsWhereInput = {
    AND?: Enumerable<CommentsWhereInput>
    OR?: Enumerable<CommentsWhereInput>
    NOT?: Enumerable<CommentsWhereInput>
    id?: IntFilter | number
    comment_author?: StringFilter | string
    comment_text?: StringFilter | string
    comment_avatar?: StringFilter | string
    Todos_Comments?: Todos_CommentsListRelationFilter
  }

  export type CommentsOrderByWithRelationInput = {
    id?: SortOrder
    comment_author?: SortOrder
    comment_text?: SortOrder
    comment_avatar?: SortOrder
    Todos_Comments?: Todos_CommentsOrderByRelationAggregateInput
  }

  export type CommentsWhereUniqueInput = {
    id?: number
  }

  export type CommentsOrderByWithAggregationInput = {
    id?: SortOrder
    comment_author?: SortOrder
    comment_text?: SortOrder
    comment_avatar?: SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _avg?: CommentsAvgOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
    _sum?: CommentsSumOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    comment_author?: StringWithAggregatesFilter | string
    comment_text?: StringWithAggregatesFilter | string
    comment_avatar?: StringWithAggregatesFilter | string
  }

  export type TagsWhereInput = {
    AND?: Enumerable<TagsWhereInput>
    OR?: Enumerable<TagsWhereInput>
    NOT?: Enumerable<TagsWhereInput>
    id?: IntFilter | number
    tag_name?: StringFilter | string
    Todos_Tags?: Todos_TagsListRelationFilter
  }

  export type TagsOrderByWithRelationInput = {
    id?: SortOrder
    tag_name?: SortOrder
    Todos_Tags?: Todos_TagsOrderByRelationAggregateInput
  }

  export type TagsWhereUniqueInput = {
    id?: number
    tag_name?: string
  }

  export type TagsOrderByWithAggregationInput = {
    id?: SortOrder
    tag_name?: SortOrder
    _count?: TagsCountOrderByAggregateInput
    _avg?: TagsAvgOrderByAggregateInput
    _max?: TagsMaxOrderByAggregateInput
    _min?: TagsMinOrderByAggregateInput
    _sum?: TagsSumOrderByAggregateInput
  }

  export type TagsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    tag_name?: StringWithAggregatesFilter | string
  }

  export type Todos_CommentsWhereInput = {
    AND?: Enumerable<Todos_CommentsWhereInput>
    OR?: Enumerable<Todos_CommentsWhereInput>
    NOT?: Enumerable<Todos_CommentsWhereInput>
    id?: IntFilter | number
    comment_id?: IntFilter | number
    todo_id?: IntFilter | number
    Comments?: XOR<CommentsRelationFilter, CommentsWhereInput>
    Todos?: XOR<TodosRelationFilter, TodosWhereInput>
  }

  export type Todos_CommentsOrderByWithRelationInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
    Comments?: CommentsOrderByWithRelationInput
    Todos?: TodosOrderByWithRelationInput
  }

  export type Todos_CommentsWhereUniqueInput = {
    id?: number
  }

  export type Todos_CommentsOrderByWithAggregationInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
    _count?: Todos_CommentsCountOrderByAggregateInput
    _avg?: Todos_CommentsAvgOrderByAggregateInput
    _max?: Todos_CommentsMaxOrderByAggregateInput
    _min?: Todos_CommentsMinOrderByAggregateInput
    _sum?: Todos_CommentsSumOrderByAggregateInput
  }

  export type Todos_CommentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Todos_CommentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Todos_CommentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Todos_CommentsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    comment_id?: IntWithAggregatesFilter | number
    todo_id?: IntWithAggregatesFilter | number
  }

  export type Todos_TagsWhereInput = {
    AND?: Enumerable<Todos_TagsWhereInput>
    OR?: Enumerable<Todos_TagsWhereInput>
    NOT?: Enumerable<Todos_TagsWhereInput>
    id?: IntFilter | number
    todo_id?: IntFilter | number
    tag_id?: IntFilter | number
    Tags?: XOR<TagsRelationFilter, TagsWhereInput>
    Todos?: XOR<TodosRelationFilter, TodosWhereInput>
  }

  export type Todos_TagsOrderByWithRelationInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
    Tags?: TagsOrderByWithRelationInput
    Todos?: TodosOrderByWithRelationInput
  }

  export type Todos_TagsWhereUniqueInput = {
    id?: number
  }

  export type Todos_TagsOrderByWithAggregationInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
    _count?: Todos_TagsCountOrderByAggregateInput
    _avg?: Todos_TagsAvgOrderByAggregateInput
    _max?: Todos_TagsMaxOrderByAggregateInput
    _min?: Todos_TagsMinOrderByAggregateInput
    _sum?: Todos_TagsSumOrderByAggregateInput
  }

  export type Todos_TagsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Todos_TagsScalarWhereWithAggregatesInput>
    OR?: Enumerable<Todos_TagsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Todos_TagsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    todo_id?: IntWithAggregatesFilter | number
    tag_id?: IntWithAggregatesFilter | number
  }

  export type profilesWhereInput = {
    AND?: Enumerable<profilesWhereInput>
    OR?: Enumerable<profilesWhereInput>
    NOT?: Enumerable<profilesWhereInput>
    id?: UuidFilter | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    username?: StringNullableFilter | string | null
    full_name?: StringNullableFilter | string | null
    avatar_url?: StringNullableFilter | string | null
    website?: StringNullableFilter | string | null
  }

  export type profilesOrderByWithRelationInput = {
    id?: SortOrder
    updated_at?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    avatar_url?: SortOrder
    website?: SortOrder
  }

  export type profilesWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type profilesOrderByWithAggregationInput = {
    id?: SortOrder
    updated_at?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    avatar_url?: SortOrder
    website?: SortOrder
    _count?: profilesCountOrderByAggregateInput
    _max?: profilesMaxOrderByAggregateInput
    _min?: profilesMinOrderByAggregateInput
  }

  export type profilesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<profilesScalarWhereWithAggregatesInput>
    OR?: Enumerable<profilesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<profilesScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    full_name?: StringNullableWithAggregatesFilter | string | null
    avatar_url?: StringNullableWithAggregatesFilter | string | null
    website?: StringNullableWithAggregatesFilter | string | null
  }

  export type TodosCreateInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Comments?: Todos_CommentsCreateNestedManyWithoutTodosInput
    Todos_Tags?: Todos_TagsCreateNestedManyWithoutTodosInput
  }

  export type TodosUncheckedCreateInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Comments?: Todos_CommentsUncheckedCreateNestedManyWithoutTodosInput
    Todos_Tags?: Todos_TagsUncheckedCreateNestedManyWithoutTodosInput
  }

  export type TodosUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUpdateManyWithoutTodosNestedInput
    Todos_Tags?: Todos_TagsUpdateManyWithoutTodosNestedInput
  }

  export type TodosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUncheckedUpdateManyWithoutTodosNestedInput
    Todos_Tags?: Todos_TagsUncheckedUpdateManyWithoutTodosNestedInput
  }

  export type TodosCreateManyInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
  }

  export type TodosUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
  }

  export type TodosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
  }

  export type CommentsCreateInput = {
    comment_author: string
    comment_text: string
    comment_avatar: string
    Todos_Comments?: Todos_CommentsCreateNestedManyWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    id?: number
    comment_author: string
    comment_text: string
    comment_avatar: string
    Todos_Comments?: Todos_CommentsUncheckedCreateNestedManyWithoutCommentsInput
  }

  export type CommentsUpdateInput = {
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUpdateManyWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUncheckedUpdateManyWithoutCommentsNestedInput
  }

  export type CommentsCreateManyInput = {
    id?: number
    comment_author: string
    comment_text: string
    comment_avatar: string
  }

  export type CommentsUpdateManyMutationInput = {
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
  }

  export type CommentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
  }

  export type TagsCreateInput = {
    tag_name: string
    Todos_Tags?: Todos_TagsCreateNestedManyWithoutTagsInput
  }

  export type TagsUncheckedCreateInput = {
    id?: number
    tag_name: string
    Todos_Tags?: Todos_TagsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type TagsUpdateInput = {
    tag_name?: StringFieldUpdateOperationsInput | string
    Todos_Tags?: Todos_TagsUpdateManyWithoutTagsNestedInput
  }

  export type TagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_name?: StringFieldUpdateOperationsInput | string
    Todos_Tags?: Todos_TagsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type TagsCreateManyInput = {
    id?: number
    tag_name: string
  }

  export type TagsUpdateManyMutationInput = {
    tag_name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_name?: StringFieldUpdateOperationsInput | string
  }

  export type Todos_CommentsCreateInput = {
    Comments: CommentsCreateNestedOneWithoutTodos_CommentsInput
    Todos: TodosCreateNestedOneWithoutTodos_CommentsInput
  }

  export type Todos_CommentsUncheckedCreateInput = {
    id?: number
    comment_id: number
    todo_id: number
  }

  export type Todos_CommentsUpdateInput = {
    Comments?: CommentsUpdateOneRequiredWithoutTodos_CommentsNestedInput
    Todos?: TodosUpdateOneRequiredWithoutTodos_CommentsNestedInput
  }

  export type Todos_CommentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_CommentsCreateManyInput = {
    id?: number
    comment_id: number
    todo_id: number
  }

  export type Todos_CommentsUpdateManyMutationInput = {

  }

  export type Todos_CommentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_TagsCreateInput = {
    Tags: TagsCreateNestedOneWithoutTodos_TagsInput
    Todos: TodosCreateNestedOneWithoutTodos_TagsInput
  }

  export type Todos_TagsUncheckedCreateInput = {
    id?: number
    todo_id: number
    tag_id: number
  }

  export type Todos_TagsUpdateInput = {
    Tags?: TagsUpdateOneRequiredWithoutTodos_TagsNestedInput
    Todos?: TodosUpdateOneRequiredWithoutTodos_TagsNestedInput
  }

  export type Todos_TagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_TagsCreateManyInput = {
    id?: number
    todo_id: number
    tag_id: number
  }

  export type Todos_TagsUpdateManyMutationInput = {

  }

  export type Todos_TagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type profilesCreateInput = {
    id: string
    updated_at?: Date | string | null
    username?: string | null
    full_name?: string | null
    avatar_url?: string | null
    website?: string | null
  }

  export type profilesUncheckedCreateInput = {
    id: string
    updated_at?: Date | string | null
    username?: string | null
    full_name?: string | null
    avatar_url?: string | null
    website?: string | null
  }

  export type profilesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profilesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profilesCreateManyInput = {
    id: string
    updated_at?: Date | string | null
    username?: string | null
    full_name?: string | null
    avatar_url?: string | null
    website?: string | null
  }

  export type profilesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type profilesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type Todos_CommentsListRelationFilter = {
    every?: Todos_CommentsWhereInput
    some?: Todos_CommentsWhereInput
    none?: Todos_CommentsWhereInput
  }

  export type Todos_TagsListRelationFilter = {
    every?: Todos_TagsWhereInput
    some?: Todos_TagsWhereInput
    none?: Todos_TagsWhereInput
  }

  export type Todos_CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Todos_TagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TodosCountOrderByAggregateInput = {
    id?: SortOrder
    complete_date?: SortOrder
    description?: SortOrder
    location?: SortOrder
    status?: SortOrder
    todo_name?: SortOrder
  }

  export type TodosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TodosMaxOrderByAggregateInput = {
    id?: SortOrder
    complete_date?: SortOrder
    description?: SortOrder
    location?: SortOrder
    status?: SortOrder
    todo_name?: SortOrder
  }

  export type TodosMinOrderByAggregateInput = {
    id?: SortOrder
    complete_date?: SortOrder
    description?: SortOrder
    location?: SortOrder
    status?: SortOrder
    todo_name?: SortOrder
  }

  export type TodosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type CommentsCountOrderByAggregateInput = {
    id?: SortOrder
    comment_author?: SortOrder
    comment_text?: SortOrder
    comment_avatar?: SortOrder
  }

  export type CommentsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    id?: SortOrder
    comment_author?: SortOrder
    comment_text?: SortOrder
    comment_avatar?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    id?: SortOrder
    comment_author?: SortOrder
    comment_text?: SortOrder
    comment_avatar?: SortOrder
  }

  export type CommentsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagsCountOrderByAggregateInput = {
    id?: SortOrder
    tag_name?: SortOrder
  }

  export type TagsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagsMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_name?: SortOrder
  }

  export type TagsMinOrderByAggregateInput = {
    id?: SortOrder
    tag_name?: SortOrder
  }

  export type TagsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommentsRelationFilter = {
    is?: CommentsWhereInput
    isNot?: CommentsWhereInput
  }

  export type TodosRelationFilter = {
    is?: TodosWhereInput
    isNot?: TodosWhereInput
  }

  export type Todos_CommentsCountOrderByAggregateInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
  }

  export type Todos_CommentsAvgOrderByAggregateInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
  }

  export type Todos_CommentsMaxOrderByAggregateInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
  }

  export type Todos_CommentsMinOrderByAggregateInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
  }

  export type Todos_CommentsSumOrderByAggregateInput = {
    id?: SortOrder
    comment_id?: SortOrder
    todo_id?: SortOrder
  }

  export type TagsRelationFilter = {
    is?: TagsWhereInput
    isNot?: TagsWhereInput
  }

  export type Todos_TagsCountOrderByAggregateInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
  }

  export type Todos_TagsAvgOrderByAggregateInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
  }

  export type Todos_TagsMaxOrderByAggregateInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
  }

  export type Todos_TagsMinOrderByAggregateInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
  }

  export type Todos_TagsSumOrderByAggregateInput = {
    id?: SortOrder
    todo_id?: SortOrder
    tag_id?: SortOrder
  }

  export type UuidFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidFilter | string
  }

  export type profilesCountOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    avatar_url?: SortOrder
    website?: SortOrder
  }

  export type profilesMaxOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    avatar_url?: SortOrder
    website?: SortOrder
  }

  export type profilesMinOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    avatar_url?: SortOrder
    website?: SortOrder
  }

  export type UuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Todos_CommentsCreateNestedManyWithoutTodosInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutTodosInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutTodosInput>
    createMany?: Todos_CommentsCreateManyTodosInputEnvelope
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
  }

  export type Todos_TagsCreateNestedManyWithoutTodosInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTodosInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTodosInput>
    createMany?: Todos_TagsCreateManyTodosInputEnvelope
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
  }

  export type Todos_CommentsUncheckedCreateNestedManyWithoutTodosInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutTodosInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutTodosInput>
    createMany?: Todos_CommentsCreateManyTodosInputEnvelope
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
  }

  export type Todos_TagsUncheckedCreateNestedManyWithoutTodosInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTodosInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTodosInput>
    createMany?: Todos_TagsCreateManyTodosInputEnvelope
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Todos_CommentsUpdateManyWithoutTodosNestedInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutTodosInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutTodosInput>
    upsert?: Enumerable<Todos_CommentsUpsertWithWhereUniqueWithoutTodosInput>
    createMany?: Todos_CommentsCreateManyTodosInputEnvelope
    set?: Enumerable<Todos_CommentsWhereUniqueInput>
    disconnect?: Enumerable<Todos_CommentsWhereUniqueInput>
    delete?: Enumerable<Todos_CommentsWhereUniqueInput>
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
    update?: Enumerable<Todos_CommentsUpdateWithWhereUniqueWithoutTodosInput>
    updateMany?: Enumerable<Todos_CommentsUpdateManyWithWhereWithoutTodosInput>
    deleteMany?: Enumerable<Todos_CommentsScalarWhereInput>
  }

  export type Todos_TagsUpdateManyWithoutTodosNestedInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTodosInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTodosInput>
    upsert?: Enumerable<Todos_TagsUpsertWithWhereUniqueWithoutTodosInput>
    createMany?: Todos_TagsCreateManyTodosInputEnvelope
    set?: Enumerable<Todos_TagsWhereUniqueInput>
    disconnect?: Enumerable<Todos_TagsWhereUniqueInput>
    delete?: Enumerable<Todos_TagsWhereUniqueInput>
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
    update?: Enumerable<Todos_TagsUpdateWithWhereUniqueWithoutTodosInput>
    updateMany?: Enumerable<Todos_TagsUpdateManyWithWhereWithoutTodosInput>
    deleteMany?: Enumerable<Todos_TagsScalarWhereInput>
  }

  export type Todos_CommentsUncheckedUpdateManyWithoutTodosNestedInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutTodosInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutTodosInput>
    upsert?: Enumerable<Todos_CommentsUpsertWithWhereUniqueWithoutTodosInput>
    createMany?: Todos_CommentsCreateManyTodosInputEnvelope
    set?: Enumerable<Todos_CommentsWhereUniqueInput>
    disconnect?: Enumerable<Todos_CommentsWhereUniqueInput>
    delete?: Enumerable<Todos_CommentsWhereUniqueInput>
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
    update?: Enumerable<Todos_CommentsUpdateWithWhereUniqueWithoutTodosInput>
    updateMany?: Enumerable<Todos_CommentsUpdateManyWithWhereWithoutTodosInput>
    deleteMany?: Enumerable<Todos_CommentsScalarWhereInput>
  }

  export type Todos_TagsUncheckedUpdateManyWithoutTodosNestedInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTodosInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTodosInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTodosInput>
    upsert?: Enumerable<Todos_TagsUpsertWithWhereUniqueWithoutTodosInput>
    createMany?: Todos_TagsCreateManyTodosInputEnvelope
    set?: Enumerable<Todos_TagsWhereUniqueInput>
    disconnect?: Enumerable<Todos_TagsWhereUniqueInput>
    delete?: Enumerable<Todos_TagsWhereUniqueInput>
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
    update?: Enumerable<Todos_TagsUpdateWithWhereUniqueWithoutTodosInput>
    updateMany?: Enumerable<Todos_TagsUpdateManyWithWhereWithoutTodosInput>
    deleteMany?: Enumerable<Todos_TagsScalarWhereInput>
  }

  export type Todos_CommentsCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutCommentsInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutCommentsInput>
    createMany?: Todos_CommentsCreateManyCommentsInputEnvelope
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
  }

  export type Todos_CommentsUncheckedCreateNestedManyWithoutCommentsInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutCommentsInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutCommentsInput>
    createMany?: Todos_CommentsCreateManyCommentsInputEnvelope
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
  }

  export type Todos_CommentsUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutCommentsInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<Todos_CommentsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: Todos_CommentsCreateManyCommentsInputEnvelope
    set?: Enumerable<Todos_CommentsWhereUniqueInput>
    disconnect?: Enumerable<Todos_CommentsWhereUniqueInput>
    delete?: Enumerable<Todos_CommentsWhereUniqueInput>
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
    update?: Enumerable<Todos_CommentsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<Todos_CommentsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<Todos_CommentsScalarWhereInput>
  }

  export type Todos_CommentsUncheckedUpdateManyWithoutCommentsNestedInput = {
    create?: XOR<Enumerable<Todos_CommentsCreateWithoutCommentsInput>, Enumerable<Todos_CommentsUncheckedCreateWithoutCommentsInput>>
    connectOrCreate?: Enumerable<Todos_CommentsCreateOrConnectWithoutCommentsInput>
    upsert?: Enumerable<Todos_CommentsUpsertWithWhereUniqueWithoutCommentsInput>
    createMany?: Todos_CommentsCreateManyCommentsInputEnvelope
    set?: Enumerable<Todos_CommentsWhereUniqueInput>
    disconnect?: Enumerable<Todos_CommentsWhereUniqueInput>
    delete?: Enumerable<Todos_CommentsWhereUniqueInput>
    connect?: Enumerable<Todos_CommentsWhereUniqueInput>
    update?: Enumerable<Todos_CommentsUpdateWithWhereUniqueWithoutCommentsInput>
    updateMany?: Enumerable<Todos_CommentsUpdateManyWithWhereWithoutCommentsInput>
    deleteMany?: Enumerable<Todos_CommentsScalarWhereInput>
  }

  export type Todos_TagsCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTagsInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTagsInput>
    createMany?: Todos_TagsCreateManyTagsInputEnvelope
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
  }

  export type Todos_TagsUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTagsInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTagsInput>
    createMany?: Todos_TagsCreateManyTagsInputEnvelope
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
  }

  export type Todos_TagsUpdateManyWithoutTagsNestedInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTagsInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<Todos_TagsUpsertWithWhereUniqueWithoutTagsInput>
    createMany?: Todos_TagsCreateManyTagsInputEnvelope
    set?: Enumerable<Todos_TagsWhereUniqueInput>
    disconnect?: Enumerable<Todos_TagsWhereUniqueInput>
    delete?: Enumerable<Todos_TagsWhereUniqueInput>
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
    update?: Enumerable<Todos_TagsUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<Todos_TagsUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<Todos_TagsScalarWhereInput>
  }

  export type Todos_TagsUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<Enumerable<Todos_TagsCreateWithoutTagsInput>, Enumerable<Todos_TagsUncheckedCreateWithoutTagsInput>>
    connectOrCreate?: Enumerable<Todos_TagsCreateOrConnectWithoutTagsInput>
    upsert?: Enumerable<Todos_TagsUpsertWithWhereUniqueWithoutTagsInput>
    createMany?: Todos_TagsCreateManyTagsInputEnvelope
    set?: Enumerable<Todos_TagsWhereUniqueInput>
    disconnect?: Enumerable<Todos_TagsWhereUniqueInput>
    delete?: Enumerable<Todos_TagsWhereUniqueInput>
    connect?: Enumerable<Todos_TagsWhereUniqueInput>
    update?: Enumerable<Todos_TagsUpdateWithWhereUniqueWithoutTagsInput>
    updateMany?: Enumerable<Todos_TagsUpdateManyWithWhereWithoutTagsInput>
    deleteMany?: Enumerable<Todos_TagsScalarWhereInput>
  }

  export type CommentsCreateNestedOneWithoutTodos_CommentsInput = {
    create?: XOR<CommentsCreateWithoutTodos_CommentsInput, CommentsUncheckedCreateWithoutTodos_CommentsInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutTodos_CommentsInput
    connect?: CommentsWhereUniqueInput
  }

  export type TodosCreateNestedOneWithoutTodos_CommentsInput = {
    create?: XOR<TodosCreateWithoutTodos_CommentsInput, TodosUncheckedCreateWithoutTodos_CommentsInput>
    connectOrCreate?: TodosCreateOrConnectWithoutTodos_CommentsInput
    connect?: TodosWhereUniqueInput
  }

  export type CommentsUpdateOneRequiredWithoutTodos_CommentsNestedInput = {
    create?: XOR<CommentsCreateWithoutTodos_CommentsInput, CommentsUncheckedCreateWithoutTodos_CommentsInput>
    connectOrCreate?: CommentsCreateOrConnectWithoutTodos_CommentsInput
    upsert?: CommentsUpsertWithoutTodos_CommentsInput
    connect?: CommentsWhereUniqueInput
    update?: XOR<CommentsUpdateWithoutTodos_CommentsInput, CommentsUncheckedUpdateWithoutTodos_CommentsInput>
  }

  export type TodosUpdateOneRequiredWithoutTodos_CommentsNestedInput = {
    create?: XOR<TodosCreateWithoutTodos_CommentsInput, TodosUncheckedCreateWithoutTodos_CommentsInput>
    connectOrCreate?: TodosCreateOrConnectWithoutTodos_CommentsInput
    upsert?: TodosUpsertWithoutTodos_CommentsInput
    connect?: TodosWhereUniqueInput
    update?: XOR<TodosUpdateWithoutTodos_CommentsInput, TodosUncheckedUpdateWithoutTodos_CommentsInput>
  }

  export type TagsCreateNestedOneWithoutTodos_TagsInput = {
    create?: XOR<TagsCreateWithoutTodos_TagsInput, TagsUncheckedCreateWithoutTodos_TagsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutTodos_TagsInput
    connect?: TagsWhereUniqueInput
  }

  export type TodosCreateNestedOneWithoutTodos_TagsInput = {
    create?: XOR<TodosCreateWithoutTodos_TagsInput, TodosUncheckedCreateWithoutTodos_TagsInput>
    connectOrCreate?: TodosCreateOrConnectWithoutTodos_TagsInput
    connect?: TodosWhereUniqueInput
  }

  export type TagsUpdateOneRequiredWithoutTodos_TagsNestedInput = {
    create?: XOR<TagsCreateWithoutTodos_TagsInput, TagsUncheckedCreateWithoutTodos_TagsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutTodos_TagsInput
    upsert?: TagsUpsertWithoutTodos_TagsInput
    connect?: TagsWhereUniqueInput
    update?: XOR<TagsUpdateWithoutTodos_TagsInput, TagsUncheckedUpdateWithoutTodos_TagsInput>
  }

  export type TodosUpdateOneRequiredWithoutTodos_TagsNestedInput = {
    create?: XOR<TodosCreateWithoutTodos_TagsInput, TodosUncheckedCreateWithoutTodos_TagsInput>
    connectOrCreate?: TodosCreateOrConnectWithoutTodos_TagsInput
    upsert?: TodosUpsertWithoutTodos_TagsInput
    connect?: TodosWhereUniqueInput
    update?: XOR<TodosUpdateWithoutTodos_TagsInput, TodosUncheckedUpdateWithoutTodos_TagsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedUuidFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidFilter | string
  }

  export type NestedUuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type Todos_CommentsCreateWithoutTodosInput = {
    Comments: CommentsCreateNestedOneWithoutTodos_CommentsInput
  }

  export type Todos_CommentsUncheckedCreateWithoutTodosInput = {
    id?: number
    comment_id: number
  }

  export type Todos_CommentsCreateOrConnectWithoutTodosInput = {
    where: Todos_CommentsWhereUniqueInput
    create: XOR<Todos_CommentsCreateWithoutTodosInput, Todos_CommentsUncheckedCreateWithoutTodosInput>
  }

  export type Todos_CommentsCreateManyTodosInputEnvelope = {
    data: Enumerable<Todos_CommentsCreateManyTodosInput>
    skipDuplicates?: boolean
  }

  export type Todos_TagsCreateWithoutTodosInput = {
    Tags: TagsCreateNestedOneWithoutTodos_TagsInput
  }

  export type Todos_TagsUncheckedCreateWithoutTodosInput = {
    id?: number
    tag_id: number
  }

  export type Todos_TagsCreateOrConnectWithoutTodosInput = {
    where: Todos_TagsWhereUniqueInput
    create: XOR<Todos_TagsCreateWithoutTodosInput, Todos_TagsUncheckedCreateWithoutTodosInput>
  }

  export type Todos_TagsCreateManyTodosInputEnvelope = {
    data: Enumerable<Todos_TagsCreateManyTodosInput>
    skipDuplicates?: boolean
  }

  export type Todos_CommentsUpsertWithWhereUniqueWithoutTodosInput = {
    where: Todos_CommentsWhereUniqueInput
    update: XOR<Todos_CommentsUpdateWithoutTodosInput, Todos_CommentsUncheckedUpdateWithoutTodosInput>
    create: XOR<Todos_CommentsCreateWithoutTodosInput, Todos_CommentsUncheckedCreateWithoutTodosInput>
  }

  export type Todos_CommentsUpdateWithWhereUniqueWithoutTodosInput = {
    where: Todos_CommentsWhereUniqueInput
    data: XOR<Todos_CommentsUpdateWithoutTodosInput, Todos_CommentsUncheckedUpdateWithoutTodosInput>
  }

  export type Todos_CommentsUpdateManyWithWhereWithoutTodosInput = {
    where: Todos_CommentsScalarWhereInput
    data: XOR<Todos_CommentsUpdateManyMutationInput, Todos_CommentsUncheckedUpdateManyWithoutTodos_CommentsInput>
  }

  export type Todos_CommentsScalarWhereInput = {
    AND?: Enumerable<Todos_CommentsScalarWhereInput>
    OR?: Enumerable<Todos_CommentsScalarWhereInput>
    NOT?: Enumerable<Todos_CommentsScalarWhereInput>
    id?: IntFilter | number
    comment_id?: IntFilter | number
    todo_id?: IntFilter | number
  }

  export type Todos_TagsUpsertWithWhereUniqueWithoutTodosInput = {
    where: Todos_TagsWhereUniqueInput
    update: XOR<Todos_TagsUpdateWithoutTodosInput, Todos_TagsUncheckedUpdateWithoutTodosInput>
    create: XOR<Todos_TagsCreateWithoutTodosInput, Todos_TagsUncheckedCreateWithoutTodosInput>
  }

  export type Todos_TagsUpdateWithWhereUniqueWithoutTodosInput = {
    where: Todos_TagsWhereUniqueInput
    data: XOR<Todos_TagsUpdateWithoutTodosInput, Todos_TagsUncheckedUpdateWithoutTodosInput>
  }

  export type Todos_TagsUpdateManyWithWhereWithoutTodosInput = {
    where: Todos_TagsScalarWhereInput
    data: XOR<Todos_TagsUpdateManyMutationInput, Todos_TagsUncheckedUpdateManyWithoutTodos_TagsInput>
  }

  export type Todos_TagsScalarWhereInput = {
    AND?: Enumerable<Todos_TagsScalarWhereInput>
    OR?: Enumerable<Todos_TagsScalarWhereInput>
    NOT?: Enumerable<Todos_TagsScalarWhereInput>
    id?: IntFilter | number
    todo_id?: IntFilter | number
    tag_id?: IntFilter | number
  }

  export type Todos_CommentsCreateWithoutCommentsInput = {
    Todos: TodosCreateNestedOneWithoutTodos_CommentsInput
  }

  export type Todos_CommentsUncheckedCreateWithoutCommentsInput = {
    id?: number
    todo_id: number
  }

  export type Todos_CommentsCreateOrConnectWithoutCommentsInput = {
    where: Todos_CommentsWhereUniqueInput
    create: XOR<Todos_CommentsCreateWithoutCommentsInput, Todos_CommentsUncheckedCreateWithoutCommentsInput>
  }

  export type Todos_CommentsCreateManyCommentsInputEnvelope = {
    data: Enumerable<Todos_CommentsCreateManyCommentsInput>
    skipDuplicates?: boolean
  }

  export type Todos_CommentsUpsertWithWhereUniqueWithoutCommentsInput = {
    where: Todos_CommentsWhereUniqueInput
    update: XOR<Todos_CommentsUpdateWithoutCommentsInput, Todos_CommentsUncheckedUpdateWithoutCommentsInput>
    create: XOR<Todos_CommentsCreateWithoutCommentsInput, Todos_CommentsUncheckedCreateWithoutCommentsInput>
  }

  export type Todos_CommentsUpdateWithWhereUniqueWithoutCommentsInput = {
    where: Todos_CommentsWhereUniqueInput
    data: XOR<Todos_CommentsUpdateWithoutCommentsInput, Todos_CommentsUncheckedUpdateWithoutCommentsInput>
  }

  export type Todos_CommentsUpdateManyWithWhereWithoutCommentsInput = {
    where: Todos_CommentsScalarWhereInput
    data: XOR<Todos_CommentsUpdateManyMutationInput, Todos_CommentsUncheckedUpdateManyWithoutTodos_CommentsInput>
  }

  export type Todos_TagsCreateWithoutTagsInput = {
    Todos: TodosCreateNestedOneWithoutTodos_TagsInput
  }

  export type Todos_TagsUncheckedCreateWithoutTagsInput = {
    id?: number
    todo_id: number
  }

  export type Todos_TagsCreateOrConnectWithoutTagsInput = {
    where: Todos_TagsWhereUniqueInput
    create: XOR<Todos_TagsCreateWithoutTagsInput, Todos_TagsUncheckedCreateWithoutTagsInput>
  }

  export type Todos_TagsCreateManyTagsInputEnvelope = {
    data: Enumerable<Todos_TagsCreateManyTagsInput>
    skipDuplicates?: boolean
  }

  export type Todos_TagsUpsertWithWhereUniqueWithoutTagsInput = {
    where: Todos_TagsWhereUniqueInput
    update: XOR<Todos_TagsUpdateWithoutTagsInput, Todos_TagsUncheckedUpdateWithoutTagsInput>
    create: XOR<Todos_TagsCreateWithoutTagsInput, Todos_TagsUncheckedCreateWithoutTagsInput>
  }

  export type Todos_TagsUpdateWithWhereUniqueWithoutTagsInput = {
    where: Todos_TagsWhereUniqueInput
    data: XOR<Todos_TagsUpdateWithoutTagsInput, Todos_TagsUncheckedUpdateWithoutTagsInput>
  }

  export type Todos_TagsUpdateManyWithWhereWithoutTagsInput = {
    where: Todos_TagsScalarWhereInput
    data: XOR<Todos_TagsUpdateManyMutationInput, Todos_TagsUncheckedUpdateManyWithoutTodos_TagsInput>
  }

  export type CommentsCreateWithoutTodos_CommentsInput = {
    comment_author: string
    comment_text: string
    comment_avatar: string
  }

  export type CommentsUncheckedCreateWithoutTodos_CommentsInput = {
    id?: number
    comment_author: string
    comment_text: string
    comment_avatar: string
  }

  export type CommentsCreateOrConnectWithoutTodos_CommentsInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutTodos_CommentsInput, CommentsUncheckedCreateWithoutTodos_CommentsInput>
  }

  export type TodosCreateWithoutTodos_CommentsInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Tags?: Todos_TagsCreateNestedManyWithoutTodosInput
  }

  export type TodosUncheckedCreateWithoutTodos_CommentsInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Tags?: Todos_TagsUncheckedCreateNestedManyWithoutTodosInput
  }

  export type TodosCreateOrConnectWithoutTodos_CommentsInput = {
    where: TodosWhereUniqueInput
    create: XOR<TodosCreateWithoutTodos_CommentsInput, TodosUncheckedCreateWithoutTodos_CommentsInput>
  }

  export type CommentsUpsertWithoutTodos_CommentsInput = {
    update: XOR<CommentsUpdateWithoutTodos_CommentsInput, CommentsUncheckedUpdateWithoutTodos_CommentsInput>
    create: XOR<CommentsCreateWithoutTodos_CommentsInput, CommentsUncheckedCreateWithoutTodos_CommentsInput>
  }

  export type CommentsUpdateWithoutTodos_CommentsInput = {
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
  }

  export type CommentsUncheckedUpdateWithoutTodos_CommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_author?: StringFieldUpdateOperationsInput | string
    comment_text?: StringFieldUpdateOperationsInput | string
    comment_avatar?: StringFieldUpdateOperationsInput | string
  }

  export type TodosUpsertWithoutTodos_CommentsInput = {
    update: XOR<TodosUpdateWithoutTodos_CommentsInput, TodosUncheckedUpdateWithoutTodos_CommentsInput>
    create: XOR<TodosCreateWithoutTodos_CommentsInput, TodosUncheckedCreateWithoutTodos_CommentsInput>
  }

  export type TodosUpdateWithoutTodos_CommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Tags?: Todos_TagsUpdateManyWithoutTodosNestedInput
  }

  export type TodosUncheckedUpdateWithoutTodos_CommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Tags?: Todos_TagsUncheckedUpdateManyWithoutTodosNestedInput
  }

  export type TagsCreateWithoutTodos_TagsInput = {
    tag_name: string
  }

  export type TagsUncheckedCreateWithoutTodos_TagsInput = {
    id?: number
    tag_name: string
  }

  export type TagsCreateOrConnectWithoutTodos_TagsInput = {
    where: TagsWhereUniqueInput
    create: XOR<TagsCreateWithoutTodos_TagsInput, TagsUncheckedCreateWithoutTodos_TagsInput>
  }

  export type TodosCreateWithoutTodos_TagsInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Comments?: Todos_CommentsCreateNestedManyWithoutTodosInput
  }

  export type TodosUncheckedCreateWithoutTodos_TagsInput = {
    id: number
    complete_date?: Date | string | null
    description?: string | null
    location?: string | null
    status?: string | null
    todo_name: string
    Todos_Comments?: Todos_CommentsUncheckedCreateNestedManyWithoutTodosInput
  }

  export type TodosCreateOrConnectWithoutTodos_TagsInput = {
    where: TodosWhereUniqueInput
    create: XOR<TodosCreateWithoutTodos_TagsInput, TodosUncheckedCreateWithoutTodos_TagsInput>
  }

  export type TagsUpsertWithoutTodos_TagsInput = {
    update: XOR<TagsUpdateWithoutTodos_TagsInput, TagsUncheckedUpdateWithoutTodos_TagsInput>
    create: XOR<TagsCreateWithoutTodos_TagsInput, TagsUncheckedCreateWithoutTodos_TagsInput>
  }

  export type TagsUpdateWithoutTodos_TagsInput = {
    tag_name?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateWithoutTodos_TagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_name?: StringFieldUpdateOperationsInput | string
  }

  export type TodosUpsertWithoutTodos_TagsInput = {
    update: XOR<TodosUpdateWithoutTodos_TagsInput, TodosUncheckedUpdateWithoutTodos_TagsInput>
    create: XOR<TodosCreateWithoutTodos_TagsInput, TodosUncheckedCreateWithoutTodos_TagsInput>
  }

  export type TodosUpdateWithoutTodos_TagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUpdateManyWithoutTodosNestedInput
  }

  export type TodosUncheckedUpdateWithoutTodos_TagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    complete_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    todo_name?: StringFieldUpdateOperationsInput | string
    Todos_Comments?: Todos_CommentsUncheckedUpdateManyWithoutTodosNestedInput
  }

  export type Todos_CommentsCreateManyTodosInput = {
    id?: number
    comment_id: number
  }

  export type Todos_TagsCreateManyTodosInput = {
    id?: number
    tag_id: number
  }

  export type Todos_CommentsUpdateWithoutTodosInput = {
    Comments?: CommentsUpdateOneRequiredWithoutTodos_CommentsNestedInput
  }

  export type Todos_CommentsUncheckedUpdateWithoutTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_CommentsUncheckedUpdateManyWithoutTodos_CommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_TagsUpdateWithoutTodosInput = {
    Tags?: TagsUpdateOneRequiredWithoutTodos_TagsNestedInput
  }

  export type Todos_TagsUncheckedUpdateWithoutTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_TagsUncheckedUpdateManyWithoutTodos_TagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_CommentsCreateManyCommentsInput = {
    id?: number
    todo_id: number
  }

  export type Todos_CommentsUpdateWithoutCommentsInput = {
    Todos?: TodosUpdateOneRequiredWithoutTodos_CommentsNestedInput
  }

  export type Todos_CommentsUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
  }

  export type Todos_TagsCreateManyTagsInput = {
    id?: number
    todo_id: number
  }

  export type Todos_TagsUpdateWithoutTagsInput = {
    Todos?: TodosUpdateOneRequiredWithoutTodos_TagsNestedInput
  }

  export type Todos_TagsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    todo_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}